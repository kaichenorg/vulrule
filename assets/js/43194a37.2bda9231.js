"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[92517],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var l=t(96540);const r={},a=l.createContext(r);function i(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(a.Provider,{value:n},e.children)}},40379:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"projects/libexpat/api_xml_memrealloc","title":"api_xml_memrealloc","description":"API Overview","source":"@site/docs/projects/libexpat/api_xml_memrealloc.md","sourceDirName":"projects/libexpat","slug":"/projects/libexpat/api_xml_memrealloc","permalink":"/vulrule/projects/libexpat/api_xml_memrealloc","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_xml_memmalloc","permalink":"/vulrule/projects/libexpat/api_xml_memmalloc"},"next":{"title":"api_xml_parsercreate","permalink":"/vulrule/projects/libexpat/api_xml_parsercreate"}}');var r=t(74848),a=t(28453);const i={},o=void 0,s={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"XML_MemRealloc"})," is an API in ",(0,r.jsx)(n.strong,{children:"libexpat"}),". This rule belongs to the ",(0,r.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,r.jsx)(n.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"The return value of XML_MemRealloc must be released by calling XML_MemFree, with the same object passed as the 2-th argument to XML_MemFree"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Tags: ",(0,r.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,r.jsxs)(n.li,{children:["Parameter Index: ",(0,r.jsx)(n.strong,{children:"-1"})]}),"\n",(0,r.jsxs)(n.li,{children:["CWE Type: ",(0,r.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("XML_MemRealloc")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("XML_MemFree")\n  and result.asExpr() = fc.getArgument(1)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("XML_MemRealloc")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);