"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[99075],{8971:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"projects/libcurl/api_curl_free","title":"api_curl_free","description":"API Overview","source":"@site/docs/projects/libcurl/api_curl_free.md","sourceDirName":"projects/libcurl","slug":"/projects/libcurl/api_curl_free","permalink":"/vulrule/projects/libcurl/api_curl_free","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_curl_formadd","permalink":"/vulrule/projects/libcurl/api_curl_formadd"},"next":{"title":"api_curl_getdate","permalink":"/vulrule/projects/libcurl/api_curl_getdate"}}');var o=t(74848),i=t(28453);const a={},c=void 0,s={},l=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"curl_free"})," is an API in ",(0,o.jsx)(n.strong,{children:"libcurl"}),". This rule belongs to the ",(0,o.jsx)(n.strong,{children:"initialization"})," type. This rule is generated using ",(0,o.jsx)(n.a,{href:"../../tools/GPTAid",children:"GPTAid"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"Parameter 1 must be initialized."})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Tags: ",(0,o.jsx)(n.strong,{children:"initialization"})]}),"\n",(0,o.jsxs)(n.li,{children:["Parameter Index: ",(0,o.jsx)(n.strong,{children:"0"})]}),"\n",(0,o.jsxs)(n.li,{children:["CWE Type: ",(0,o.jsx)(n.strong,{children:"CWE-457"})]}),"\n"]})}),"\n",(0,o.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'/**\n * @name uninitialize\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/uninitialize\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n\n predicate isSourceFC(FunctionCall fc)\n {\n fc.getTarget().hasName("initialize")\n }\n\n//  DataFlow::Node getSourceNode(FunctionCall fc)\n//  {\n//      result.asExpr() = getMallocExpr(fc)\n//      or\n//      result.asDefiningArgument() = getMallocExpr(fc)\n//  }\n\n Expr getSinkExpr(FunctionCall fc)\n {\n    isSinkFC(fc)\n    and\n result = fc.getArgument(0) \n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("curl_free")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getSinkExpr(fc)\n     or\n     result.asDefiningArgument() = getSinkExpr(fc)\n }\n    \n class ParameterConfiguration extends DataFlow::Configuration {\n     ParameterConfiguration() { this = "ParameterConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n            isSourceFC(fc)\n            and\n            (source.asExpr() = fc\n            or\n            source.asExpr() = fc.getAnArgument()\n            or\n            source.asDefiningArgument() = fc.getAnArgument())\n            )\n        \n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n   predicate isFlow(Expr source, Expr sink) {\n    exists(ParameterConfiguration cfg | \n            cfg.hasFlow(DataFlow::exprNode(source), DataFlow::exprNode(sink))\n        )\n    \n}\n\n// predicate isFlow(Expr source, Expr sink) {\n//     exists(FunctionCall sourcefc, FunctionCall sinkfc| \n//         isSourceFC(sourcefc)\n//         and isSinkFC(sinkfc)\n//         and (source = sourcefc.getAnArgument() or source = sourcefc)\n//         and sink = getSinkExpr(sinkfc)\n//         and exists(ParameterConfiguration cfg | \n//             cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(sinkfc))\n//             )\n//         )\n    \n// }\n   \nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n        isSinkFC(target)\n    // target.getTarget().hasName("free")\n    and result = target\n    )\n}\n\nControlFlowNode getBeforeNode(FunctionCall target) {\n    exists(FunctionCall sourcefc, ParameterConfiguration cfg, Expr source| \n        isSourceFC(sourcefc)\n        and (source = sourcefc or source = sourcefc.getAnArgument())\n        and\n        cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(target))\n        and target.getAPredecessor*() = source\n        // and not e = target.getAnArgument()\n        and result = sourcefc)\n}\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalBefore(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getBeforeNode(target)\n    and not node.getBasicBlock() = target.getBasicBlock()\n    and\n    exists(BasicBlock bb | \n        bb.getASuccessor().getANode() = node\n        and bb.getASuccessor().getANode() = target\n        \n        )\n}\n\n\nBasicBlock getLeakBBBefore(ControlFlowNode target) {\n    isSinkFC(target)\n    and\n    // result.getASuccessor*() = target\n    // and\n    not exists(ControlFlowNode node | \n        node = getBeforeNode(target)\n        and (not\n        exists(BasicBlock bb | \n            bb.getASuccessor*() = target\n            // and bb.getAPredecessor*() = node\n            and not bb.getANode() = node\n        and result = bb\n        and not bb.getAPredecessor*() = node.getBasicBlock()\n        and not bb.getASuccessor*() = node.getBasicBlock()\n        )\n        and not isConditionalBefore(node, target)\n        )\n        )\n}\n\n \n predicate isLocalVariable(Expr e) {\n    exists(LocalVariable lv | \n       exists(FunctionCall fc| \n           fc = e and\n           exists(AssignExpr ae | \n           ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n       )\n           or\n           lv.getAnAccess() = e\n           )\n}\n \n\n \n \n from FunctionCall target\n where\n target = getTargetNode()\n and\n isLocalVariable(getSinkExpr(target))\n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBBefore(target))\n select target, target.getLocation().toString()\n \n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(96540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);