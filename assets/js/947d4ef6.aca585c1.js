"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[97028],{203:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"projects/linux kernel/api_pcistub_device_find","title":"api_pcistub_device_find","description":"API Overview","source":"@site/docs/projects/linux kernel/api_pcistub_device_find.md","sourceDirName":"projects/linux kernel","slug":"/projects/linux kernel/api_pcistub_device_find","permalink":"/vulrule/projects/linux kernel/api_pcistub_device_find","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_pcibios_get_irq_routing_table","permalink":"/vulrule/projects/linux kernel/api_pcibios_get_irq_routing_table"},"next":{"title":"api_pcistub_device_get","permalink":"/vulrule/projects/linux kernel/api_pcistub_device_get"}}');var r=i(74848),l=i(28453);const c={},s=void 0,o={},a=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pcistub_device_find"})," is an API in ",(0,r.jsx)(n.strong,{children:"Linux kernel"}),". This rule belongs to the ",(0,r.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,r.jsx)(n.a,{href:"../../tools/APISpecGen",children:"APISpecGen"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"The resource acquired by pcistub_device_find must be properly released using pcistub_device_put"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Tags: ",(0,r.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,r.jsxs)(n.li,{children:["Parameter Index: ",(0,r.jsx)(n.strong,{children:"N/A"})]}),"\n",(0,r.jsxs)(n.li,{children:["CWE Type: ",(0,r.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'\n    import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("pcistub_device_find")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("pcistub_device_put")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("pcistub_device_find")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n    \n'})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>s});var t=i(96540);const r={},l=t.createContext(r);function c(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);