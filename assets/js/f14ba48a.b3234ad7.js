"use strict";(self.webpackChunkvulrule_docusaurus=self.webpackChunkvulrule_docusaurus||[]).push([[17084],{36449:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"libraries/libzip/zip_error_init","title":"zip_error_init","description":"libzip","source":"@site/docs/libraries/libzip/zip_error_init.md","sourceDirName":"libraries/libzip","slug":"/libraries/libzip/zip_error_init","permalink":"/vulrule/libraries/libzip/zip_error_init","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"zip_error_fini","permalink":"/vulrule/libraries/libzip/zip_error_fini"},"next":{"title":"zip_error_strerror","permalink":"/vulrule/libraries/libzip/zip_error_strerror"}}');var a=i(74848),t=i(28453),s=i(29800);const l={sidebar_position:1},c="zip_error_init",o={},d=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u4f7f\u7528\u89c4\u5219",id:"\u4f7f\u7528\u89c4\u5219",level:2},{value:"\u76f8\u5173API",id:"\u76f8\u5173api",level:2}];function p(n){const e={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"zip_error_init",children:"zip_error_init"})}),"\n",(0,a.jsxs)("div",{className:"api-metadata",children:[(0,a.jsx)("span",{className:"api-library",children:"libzip"}),(0,a.jsx)("span",{className:"api-category",children:"Parameter Check"})]}),"\n",(0,a.jsx)(e.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,a.jsxs)(e.p,{children:["zip_error_init \u662f libzip \u5e93\u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5API\u5c5e\u4e8e ",(0,a.jsx)(e.strong,{children:"Parameter Check"})," \u7c7b\u578b\u7684\u89c4\u5219\u3002"]}),"\n",(0,a.jsx)(e.h2,{id:"\u4f7f\u7528\u89c4\u5219",children:"\u4f7f\u7528\u89c4\u5219"}),"\n",(0,a.jsxs)("div",{className:"rule-tool-info",children:["\u7531 ",(0,a.jsx)("a",{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,a.jsx)(s.A,{ruleName:"\u89c4\u5219 1",ruleType:"Parameter Check",ruleData:{Description:"Parameter 1 must not be NULL.",Label:["parameter check"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-476"],QLCode:'/**\n * @name parameterCheck\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/paracheck\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \n     \n Expr getSinkExpr(FunctionCall fc)\n {\n     //Change\n result = fc.getArgument(0)\n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n     // Change\n fc.getTarget().hasName("zip_error_init")\n }\n GuardCondition getGuard(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n     exists(Expr e, Variable a| e = getSinkExpr(fc)\n    //  and isLocalVariable(a)\n     and a.getAnAccess() = e\n     and exists(GuardCondition g, Expr ge| \n         a.getAnAccess() = ge\n         and g.getASuccessor*() = fc\n         and g.getAChild*() = ge\n         and not exists(FunctionCall fc_in | \n            g.getAChild*() = fc_in\n            and fc_in.getAnArgument() = a.getAnAccess()\n            )\n         and result = g\n         )\n     )\n }\n \n// predicate getMalloc(FunctionCall fc) {\n//   fc.getTarget().hasName("malloc")\n  \n// }\n\n class PathConfiguration extends DataFlow::Configuration {\n    PathConfiguration() { this = "PathConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(AssignExpr a | \n        source.asExpr() = a.getRValue()\n        and exists(Variable v | \n          v.getAnAccess() = a.getRValue()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n         )\n         or exists(Variable v | \n          source.asExpr() = v.getInitializer().getExpr()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n          or\n          exists(FunctionCall fc |\n            source.asExpr() = fc)\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n        isSinkFC(fc)\n        and\n        sink.asExpr() = getSinkExpr(fc)\n    )\n     }\n   }\n\n\npredicate hasFlowtoAPI(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n    exists(PathConfiguration p, DataFlow::Node source| \n        p.hasFlow(source, DataFlow::exprNode(getSinkExpr(fc)))\n    \n        )\n}\n//  predicate \n\n\npredicate hasSpecifiedFunctionInThen(FunctionCall fc) {\n    // isSinkFC(fc) \n    // and isuseSamePara(fc, barrier)\n    // and\n    exists(IfStmt ifStmt | \n      fc.getEnclosingStmt() = ifStmt.getThen().getAChild*()\n      and not exists(Stmt elseStmt | elseStmt = ifStmt.getElse())\n        )\n  }\n\n  class ExcludeArrayAndConstantPointer extends Variable {\n    ExcludeArrayAndConstantPointer() {\n      exists(Type t |\n        // Exclude array types\n        t = this.getType() and\n        t instanceof ArrayType or\n  \n        // Exclude constant pointer types\n        t = this.getType() and\n        t instanceof PointerType and\n        exists(Expr initializer |\n            this.getInitializer().getExpr() = initializer and\n            initializer instanceof StringLiteral)\n      )\n    }\n  }\n\n  predicate isuseSamePara(FunctionCall target, FunctionCall barrier) {\n    isSinkFC(target)\n    and\n    exists(Variable v, Expr p| \n        p = getSinkExpr(target)\n        and\n        barrier.getAnArgument() = v.getAnAccess()\n        and v.getAnAccess() = p\n        and barrier.getASuccessor+() = target\n        )\n}\n\n from FunctionCall target\n where\n (isSinkFC(target)\n and hasFlowtoAPI(target)\n and not exists(GuardCondition g| \n     g = getGuard(target)\n    //  and source.getASuccessor*() = g\n     )\nand exists(Expr e, LocalVariable a| e = getSinkExpr(target)\n//  and isLocalVariable(a)\n and a.getAnAccess() = e.getAChild*()\n)\nand not exists(AddressOfExpr ae | \n    ae = getSinkExpr(target)))\n\n    and \n    (\n\n        (not exists(FunctionCall barrier | isuseSamePara(target, barrier)))\n    or (\n        exists(FunctionCall barrier | \n        isuseSamePara(target, barrier)\n        and hasSpecifiedFunctionInThen(barrier)\n        )\n        )\n\n    )\n\n    and exists(Variable v | \n        v.getAnAccess() = getSinkExpr(target)\n        and not v instanceof ExcludeArrayAndConstantPointer\n        )\n select target, target.getLocation().toString()'}]}}),"\n",(0,a.jsx)(e.h2,{id:"\u76f8\u5173api",children:"\u76f8\u5173API"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/libraries/libzip/zip_stat_init",children:"zip_stat_init"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/libraries/libzip/zip_error_code_zip",children:"zip_error_code_zip"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/libraries/libzip/zip_error_fini",children:"zip_error_fini"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/libraries/libzip/zip_stat_index",children:"zip_stat_index"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/libraries/libzip/zip_source_read",children:"zip_source_read"})}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}}}]);