"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[46431],{28453:(e,l,n)=>{n.d(l,{R:()=>i,x:()=>o});var r=n(96540);const t={},c=r.createContext(t);function i(e){const l=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function o(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(c.Provider,{value:l},e.children)}},31220:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"projects/linux kernel/api_alloc_cld_upcall","title":"api_alloc_cld_upcall","description":"API Overview","source":"@site/docs/projects/linux kernel/api_alloc_cld_upcall.md","sourceDirName":"projects/linux kernel","slug":"/projects/linux kernel/api_alloc_cld_upcall","permalink":"/vulrule/projects/linux kernel/api_alloc_cld_upcall","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_alloc_cipher_test_sglists","permalink":"/vulrule/projects/linux kernel/api_alloc_cipher_test_sglists"},"next":{"title":"api_alloc_client","permalink":"/vulrule/projects/linux kernel/api_alloc_client"}}');var t=n(74848),c=n(28453);const i={},o=void 0,a={},s=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const l={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.strong,{children:"alloc_cld_upcall"})," is an API in ",(0,t.jsx)(l.strong,{children:"Linux kernel"}),". This rule belongs to the ",(0,t.jsx)(l.strong,{children:"api pair"})," type. This rule is generated using ",(0,t.jsx)(l.a,{href:"../../tools/APISpecGen",children:"APISpecGen"}),"."]}),"\n",(0,t.jsx)(l.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,t.jsx)(l.admonition,{type:"tip",children:(0,t.jsx)(l.p,{children:"The resource acquired by alloc_cld_upcall must be properly released using free_cld_upcall"})}),"\n",(0,t.jsx)(l.admonition,{type:"info",children:(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsxs)(l.li,{children:["Tags: ",(0,t.jsx)(l.strong,{children:"api pair"})]}),"\n",(0,t.jsxs)(l.li,{children:["Parameter Index: ",(0,t.jsx)(l.strong,{children:"N/A"})]}),"\n",(0,t.jsxs)(l.li,{children:["CWE Type: ",(0,t.jsx)(l.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,t.jsx)(l.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'\n    import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("alloc_cld_upcall")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("free_cld_upcall")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("alloc_cld_upcall")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n    \n'})})]})}function p(e={}){const{wrapper:l}={...(0,c.R)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);