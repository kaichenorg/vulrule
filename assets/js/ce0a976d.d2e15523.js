"use strict";(self.webpackChunkvulrule_docusaurus=self.webpackChunkvulrule_docusaurus||[]).push([[37344],{82353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"libraries/zlib/crc32","title":"crc32","description":"zlib","source":"@site/docs/libraries/zlib/crc32.md","sourceDirName":"libraries/zlib","slug":"/libraries/zlib/crc32","permalink":"/vulrule/libraries/zlib/crc32","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"compress2","permalink":"/vulrule/libraries/zlib/compress2"},"next":{"title":"crc32_z","permalink":"/vulrule/libraries/zlib/crc32_z"}}');var a=t(74848),i=t(28453),o=t(29800);const s={sidebar_position:1},c="crc32",l={},d=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u4f7f\u7528\u89c4\u5219",id:"\u4f7f\u7528\u89c4\u5219",level:2},{value:"\u76f8\u5173API",id:"\u76f8\u5173api",level:2}];function g(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"crc32",children:"crc32"})}),"\n",(0,a.jsxs)("div",{className:"api-metadata",children:[(0,a.jsx)("span",{className:"api-library",children:"zlib"}),(0,a.jsx)("span",{className:"api-category",children:"Initialization"})]}),"\n",(0,a.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,a.jsxs)(n.p,{children:["crc32 \u662f zlib \u5e93\u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5API\u5c5e\u4e8e ",(0,a.jsx)(n.strong,{children:"Initialization"})," \u7c7b\u578b\u7684\u89c4\u5219\u3002"]}),"\n",(0,a.jsx)(n.h2,{id:"\u4f7f\u7528\u89c4\u5219",children:"\u4f7f\u7528\u89c4\u5219"}),"\n",(0,a.jsxs)(n.p,{children:["\u7531 ",(0,a.jsx)(n.a,{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,a.jsx)(o.A,{ruleName:"\u89c4\u5219 1",ruleType:"Initialization",ruleData:{Description:"Parameter 1 must be initialized.",Label:["initialization"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-457"],QLCode:'/**\n * @name uninitialize\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/uninitialize\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n\n predicate isSourceFC(FunctionCall fc)\n {\n fc.getTarget().hasName("initialize")\n }\n\n//  DataFlow::Node getSourceNode(FunctionCall fc)\n//  {\n//      result.asExpr() = getMallocExpr(fc)\n//      or\n//      result.asDefiningArgument() = getMallocExpr(fc)\n//  }\n\n Expr getSinkExpr(FunctionCall fc)\n {\n    isSinkFC(fc)\n    and\n result = fc.getArgument(0) \n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("crc32")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getSinkExpr(fc)\n     or\n     result.asDefiningArgument() = getSinkExpr(fc)\n }\n    \n class ParameterConfiguration extends DataFlow::Configuration {\n     ParameterConfiguration() { this = "ParameterConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n            isSourceFC(fc)\n            and\n            (source.asExpr() = fc\n            or\n            source.asExpr() = fc.getAnArgument()\n            or\n            source.asDefiningArgument() = fc.getAnArgument())\n            )\n        \n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n   predicate isFlow(Expr source, Expr sink) {\n    exists(ParameterConfiguration cfg | \n            cfg.hasFlow(DataFlow::exprNode(source), DataFlow::exprNode(sink))\n        )\n    \n}\n\n// predicate isFlow(Expr source, Expr sink) {\n//     exists(FunctionCall sourcefc, FunctionCall sinkfc| \n//         isSourceFC(sourcefc)\n//         and isSinkFC(sinkfc)\n//         and (source = sourcefc.getAnArgument() or source = sourcefc)\n//         and sink = getSinkExpr(sinkfc)\n//         and exists(ParameterConfiguration cfg | \n//             cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(sinkfc))\n//             )\n//         )\n    \n// }\n   \nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n        isSinkFC(target)\n    // target.getTarget().hasName("free")\n    and result = target\n    )\n}\n\nControlFlowNode getBeforeNode(FunctionCall target) {\n    exists(FunctionCall sourcefc, ParameterConfiguration cfg, Expr source| \n        isSourceFC(sourcefc)\n        and (source = sourcefc or source = sourcefc.getAnArgument())\n        and\n        cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(target))\n        and target.getAPredecessor*() = source\n        // and not e = target.getAnArgument()\n        and result = sourcefc)\n}\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalBefore(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getBeforeNode(target)\n    and not node.getBasicBlock() = target.getBasicBlock()\n    and\n    exists(BasicBlock bb | \n        bb.getASuccessor().getANode() = node\n        and bb.getASuccessor().getANode() = target\n        \n        )\n}\n\n\nBasicBlock getLeakBBBefore(ControlFlowNode target) {\n    isSinkFC(target)\n    and\n    // result.getASuccessor*() = target\n    // and\n    not exists(ControlFlowNode node | \n        node = getBeforeNode(target)\n        and (not\n        exists(BasicBlock bb | \n            bb.getASuccessor*() = target\n            // and bb.getAPredecessor*() = node\n            and not bb.getANode() = node\n        and result = bb\n        and not bb.getAPredecessor*() = node.getBasicBlock()\n        and not bb.getASuccessor*() = node.getBasicBlock()\n        )\n        and not isConditionalBefore(node, target)\n        )\n        )\n}\n\n \n predicate isLocalVariable(Expr e) {\n    exists(LocalVariable lv | \n       exists(FunctionCall fc| \n           fc = e and\n           exists(AssignExpr ae | \n           ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n       )\n           or\n           lv.getAnAccess() = e\n           )\n}\n \n\n \n \n from FunctionCall target\n where\n target = getTargetNode()\n and\n isLocalVariable(getSinkExpr(target))\n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBBefore(target))\n select target, target.getLocation().toString()\n '}]}}),"\n",(0,a.jsxs)(n.p,{children:["\u7531 ",(0,a.jsx)(n.a,{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,a.jsx)(o.A,{ruleName:"\u89c4\u5219 2",ruleType:"Initialization",ruleData:{Description:"Parameter 2 must be initialized.",Label:["initialization"],"Parameter-index":["1"],"cweType-and-QLCode":[{cweType:["CWE-457"],QLCode:'/**\n * @name uninitialize\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/uninitialize\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n\n predicate isSourceFC(FunctionCall fc)\n {\n fc.getTarget().hasName("initialize")\n }\n\n//  DataFlow::Node getSourceNode(FunctionCall fc)\n//  {\n//      result.asExpr() = getMallocExpr(fc)\n//      or\n//      result.asDefiningArgument() = getMallocExpr(fc)\n//  }\n\n Expr getSinkExpr(FunctionCall fc)\n {\n    isSinkFC(fc)\n    and\n result = fc.getArgument(1) \n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("crc32")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getSinkExpr(fc)\n     or\n     result.asDefiningArgument() = getSinkExpr(fc)\n }\n    \n class ParameterConfiguration extends DataFlow::Configuration {\n     ParameterConfiguration() { this = "ParameterConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n            isSourceFC(fc)\n            and\n            (source.asExpr() = fc\n            or\n            source.asExpr() = fc.getAnArgument()\n            or\n            source.asDefiningArgument() = fc.getAnArgument())\n            )\n        \n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n   predicate isFlow(Expr source, Expr sink) {\n    exists(ParameterConfiguration cfg | \n            cfg.hasFlow(DataFlow::exprNode(source), DataFlow::exprNode(sink))\n        )\n    \n}\n\n// predicate isFlow(Expr source, Expr sink) {\n//     exists(FunctionCall sourcefc, FunctionCall sinkfc| \n//         isSourceFC(sourcefc)\n//         and isSinkFC(sinkfc)\n//         and (source = sourcefc.getAnArgument() or source = sourcefc)\n//         and sink = getSinkExpr(sinkfc)\n//         and exists(ParameterConfiguration cfg | \n//             cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(sinkfc))\n//             )\n//         )\n    \n// }\n   \nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n        isSinkFC(target)\n    // target.getTarget().hasName("free")\n    and result = target\n    )\n}\n\nControlFlowNode getBeforeNode(FunctionCall target) {\n    exists(FunctionCall sourcefc, ParameterConfiguration cfg, Expr source| \n        isSourceFC(sourcefc)\n        and (source = sourcefc or source = sourcefc.getAnArgument())\n        and\n        cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(target))\n        and target.getAPredecessor*() = source\n        // and not e = target.getAnArgument()\n        and result = sourcefc)\n}\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalBefore(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getBeforeNode(target)\n    and not node.getBasicBlock() = target.getBasicBlock()\n    and\n    exists(BasicBlock bb | \n        bb.getASuccessor().getANode() = node\n        and bb.getASuccessor().getANode() = target\n        \n        )\n}\n\n\nBasicBlock getLeakBBBefore(ControlFlowNode target) {\n    isSinkFC(target)\n    and\n    // result.getASuccessor*() = target\n    // and\n    not exists(ControlFlowNode node | \n        node = getBeforeNode(target)\n        and (not\n        exists(BasicBlock bb | \n            bb.getASuccessor*() = target\n            // and bb.getAPredecessor*() = node\n            and not bb.getANode() = node\n        and result = bb\n        and not bb.getAPredecessor*() = node.getBasicBlock()\n        and not bb.getASuccessor*() = node.getBasicBlock()\n        )\n        and not isConditionalBefore(node, target)\n        )\n        )\n}\n\n \n predicate isLocalVariable(Expr e) {\n    exists(LocalVariable lv | \n       exists(FunctionCall fc| \n           fc = e and\n           exists(AssignExpr ae | \n           ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n       )\n           or\n           lv.getAnAccess() = e\n           )\n}\n \n\n \n \n from FunctionCall target\n where\n target = getTargetNode()\n and\n isLocalVariable(getSinkExpr(target))\n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBBefore(target))\n select target, target.getLocation().toString()\n '}]}}),"\n",(0,a.jsx)(n.h2,{id:"\u76f8\u5173api",children:"\u76f8\u5173API"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/zlib/inflate",children:"inflate"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/zlib/adler32",children:"adler32"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/zlib/gzclose",children:"gzclose"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/zlib/deflatereset",children:"deflateReset"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/zlib/gzread",children:"gzread"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}}}]);