"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[67558],{19535:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"projects/ffmpeg/api_avformat_alloc_context","title":"api_avformat_alloc_context","description":"API Overview","source":"@site/docs/projects/ffmpeg/api_avformat_alloc_context.md","sourceDirName":"projects/ffmpeg","slug":"/projects/ffmpeg/api_avformat_alloc_context","permalink":"/vulrule/projects/ffmpeg/api_avformat_alloc_context","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_avfilter_inout_free","permalink":"/vulrule/projects/ffmpeg/api_avfilter_inout_free"},"next":{"title":"api_avformat_free_context","permalink":"/vulrule/projects/ffmpeg/api_avformat_free_context"}}');var o=n(74848),a=n(28453);const l={},i=void 0,c={},s=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function f(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"avformat_alloc_context"})," is an API in ",(0,o.jsx)(t.strong,{children:"ffmpeg"}),". This rule belongs to the ",(0,o.jsx)(t.strong,{children:"api pair"})," type. This rule is generated using ",(0,o.jsx)(t.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"The return value of avformat_alloc_context must be released by calling avformat_free_context, with the same object passed as the 1-th argument to avformat_free_context"})}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Tags: ",(0,o.jsx)(t.strong,{children:"api pair"})]}),"\n",(0,o.jsxs)(t.li,{children:["Parameter Index: ",(0,o.jsx)(t.strong,{children:"-1"})]}),"\n",(0,o.jsxs)(t.li,{children:["CWE Type: ",(0,o.jsx)(t.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,o.jsx)(t.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("avformat_alloc_context")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("avformat_free_context")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("avformat_alloc_context")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var r=n(96540);const o={},a=r.createContext(o);function l(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);