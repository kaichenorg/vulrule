"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[82615],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const l={},i=r.createContext(l);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},44578:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"projects/libdbus/api_dbus_list_clear_full","title":"api_dbus_list_clear_full","description":"API Overview","source":"@site/docs/projects/libdbus/api_dbus_list_clear_full.md","sourceDirName":"projects/libdbus","slug":"/projects/libdbus/api_dbus_list_clear_full","permalink":"/vulrule/projects/libdbus/api_dbus_list_clear_full","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_dbus_list_alloc_link","permalink":"/vulrule/projects/libdbus/api_dbus_list_alloc_link"},"next":{"title":"api_dbus_list_free_link","permalink":"/vulrule/projects/libdbus/api_dbus_list_free_link"}}');var l=t(74848),i=t(28453);const s={},a=void 0,o={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"_dbus_list_clear_full"})," is an API in ",(0,l.jsx)(n.strong,{children:"libdbus"}),". This rule belongs to the ",(0,l.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,l.jsx)(n.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsx)(n.p,{children:"Once a resource is passed as the 2-th argument to _dbus_list_clear_full, it must not be freed again."})}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Tags: ",(0,l.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,l.jsxs)(n.li,{children:["Parameter Index: ",(0,l.jsx)(n.strong,{children:"1"})]}),"\n",(0,l.jsxs)(n.li,{children:["CWE Type: ",(0,l.jsx)(n.strong,{children:"CWE-415"})]}),"\n"]})}),"\n",(0,l.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'/**\n * @name doublefree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/doublefree\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("_dbus_hash_table_new") and e = fc.getArgument(2))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(1)\n        and\n        (\n            fc.getTarget().hasName("_dbus_list_clear_full")\n        // or\n        //  fc.getTarget().hasName("target")\n        // TODO-addFreeHere\n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n\n fc.getTarget().hasName("_dbus_hash_table_new")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("_dbus_list_clear_full")\n//  or\n//  fc.getTarget().hasName("target")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n         or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\n from FunctionCall target, FunctionCall free\n where\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and free.getAPredecessor*() = malloc)\nand\nisSinkFC(free)\n   and free.getASuccessor*() = target\n   and not free = target\nand exists(Variable v | \n    \n    v.getAnAccess() = getFreeExpr(target)\n    and v.getAnAccess() = getFreeExpr(free)\n//  and \n// isLocalVariable(getMallocExpr(target))\n and not \n exists(MallocConfiguration cfg, Expr malloc| \n    // isSourceFC(malloc)\n    free.getASuccessor*() = malloc\n    and malloc.getASuccessor*() = target\n    and\n    cfg.hasFlow(DataFlow::exprNode(malloc), getSinkNode(target))\n    )\n)\n select target, "First Freed in " + free.getLocation().toString() + ". Double free in " + target.getLocation().toString()\n \n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}}}]);