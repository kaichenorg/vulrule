"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[97141],{26092:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"projects/libdbus/api_dbus_message_iter_get_signature","title":"api_dbus_message_iter_get_signature","description":"API Overview","source":"@site/docs/projects/libdbus/api_dbus_message_iter_get_signature.md","sourceDirName":"projects/libdbus","slug":"/projects/libdbus/api_dbus_message_iter_get_signature","permalink":"/vulrule/projects/libdbus/api_dbus_message_iter_get_signature","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_dbus_message_iter_abandon_container","permalink":"/vulrule/projects/libdbus/api_dbus_message_iter_abandon_container"},"next":{"title":"api_dbus_message_iter_open_container","permalink":"/vulrule/projects/libdbus/api_dbus_message_iter_open_container"}}');var r=t(74848),i=t(28453);const a={},o=void 0,l={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"dbus_message_iter_get_signature"})," is an API in ",(0,r.jsx)(n.strong,{children:"libdbus"}),". This rule belongs to the ",(0,r.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,r.jsx)(n.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Parameter 1 of dbus_message_iter_get_signature must be released by calling dbus_message_iter_abandon_container, with the same object passed as the 1-th argument to dbus_message_iter_abandon_container"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Tags: ",(0,r.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,r.jsxs)(n.li,{children:["Parameter Index: ",(0,r.jsx)(n.strong,{children:"0"})]}),"\n",(0,r.jsxs)(n.li,{children:["CWE Type: ",(0,r.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("dbus_message_iter_get_signature")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("dbus_message_iter_abandon_container")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("dbus_message_iter_get_signature")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);