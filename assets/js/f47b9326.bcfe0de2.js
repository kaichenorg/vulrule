"use strict";(self.webpackChunkvulrule_docusaurus=self.webpackChunkvulrule_docusaurus||[]).push([[91470],{35944:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"libraries/sqlite3/sqlite3_finalize","title":"sqlite3_finalize","description":"sqlite3","source":"@site/docs/libraries/sqlite3/sqlite3_finalize.md","sourceDirName":"libraries/sqlite3","slug":"/libraries/sqlite3/sqlite3_finalize","permalink":"/vulrule/libraries/sqlite3/sqlite3_finalize","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"sqlite3_file_control","permalink":"/vulrule/libraries/sqlite3/sqlite3_file_control"},"next":{"title":"sqlite3_free","permalink":"/vulrule/libraries/sqlite3/sqlite3_free"}}');var r=a(74848),i=a(28453),l=a(29800);const s={sidebar_position:1},c="sqlite3_finalize",o={},g=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u4f7f\u7528\u89c4\u5219",id:"\u4f7f\u7528\u89c4\u5219",level:2},{value:"\u76f8\u5173API",id:"\u76f8\u5173api",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sqlite3_finalize",children:"sqlite3_finalize"})}),"\n",(0,r.jsxs)("div",{className:"api-metadata",children:[(0,r.jsx)("span",{className:"api-library",children:"sqlite3"}),(0,r.jsx)("span",{className:"api-category",children:"Api Pair"})]}),"\n",(0,r.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,r.jsxs)(n.p,{children:["sqlite3_finalize \u662f sqlite3 \u5e93\u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5API\u5c5e\u4e8e ",(0,r.jsx)(n.strong,{children:"Api Pair"})," \u7c7b\u578b\u7684\u89c4\u5219\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"\u4f7f\u7528\u89c4\u5219",children:"\u4f7f\u7528\u89c4\u5219"}),"\n",(0,r.jsxs)(n.p,{children:["\u7531 ",(0,r.jsx)(n.a,{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,r.jsx)(l.A,{ruleName:"\u89c4\u5219 1",ruleType:"Api Pair",ruleData:{Description:"Parameter 1 must not be used later.",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-416"],QLCode:'/**\n * @name UAF\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/UAF\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("malloc") and e = fc)\n or (fc.getTarget().hasName("sqlite3_prepare_v2") and e = fc.getArgument(3))\n or (fc.getTarget().hasName("sqlite3_exec") and e = fc.getArgument(4))\n or (fc.getTarget().hasName("sqlite3_get_table") and e = fc.getArgument(2))\n or (fc.getTarget().hasName("sqlite3_get_table") and e = fc.getArgument(5))\n or (fc.getTarget().hasName("sqlite3_open") and e = fc.getArgument(1))\n or (fc.getTarget().hasName("sqlite3_open_v2") and e = fc.getArgument(1))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            // TODO-Target-change\n            fc.getTarget().hasName("sqlite3_finalize")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        \n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n// // TODO-addMallocFCHere\n fc.getTarget().hasName("malloc")\n or fc.getTarget().hasName("sqlite3_prepare_v2")\n or fc.getTarget().hasName("sqlite3_exec")\n or fc.getTarget().hasName("sqlite3_get_table")\n or fc.getTarget().hasName("sqlite3_get_table")\n or fc.getTarget().hasName("sqlite3_open")\n or fc.getTarget().hasName("sqlite3_open_v2")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("sqlite3_finalize")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n    override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n         isSourceFC(fc)\n         and\n         source = getSourceNode(fc)\n          )\n          or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n      }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(Expr e |\n         sink.asExpr() = e\n         or sink.asDefiningArgument() = e\n       )\n     }\n   }\n//  target is a free function\nfrom FunctionCall target, Expr use\nwhere\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and target.getAPredecessor*() = malloc)\nand not target.getAnArgument() = use\nand target.getASuccessor*() = use\n//  and \n// isLocalVariable(getMallocExpr(target))\nand  exists(Variable v| \n   v.getAnAccess() = use\n   and v.getAnAccess() = getFreeExpr(target)\n   and not exists(Expr malloc, MallocConfiguration cfg | \n       use.getAPredecessor*() = malloc \n   and malloc.getAPredecessor*() = target\n   and\n   cfg.hasFlow(DataFlow::exprNode(malloc), DataFlow::exprNode(use))\n   )\n       )\n\nselect target, "Freed in " + target.getLocation().toString() + ". Used in " + use.getLocation().toString()\n'}]}}),"\n",(0,r.jsx)(n.h2,{id:"\u76f8\u5173api",children:"\u76f8\u5173API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/sqlite3/sqlite3_prepare_v2",children:"sqlite3_prepare_v2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/sqlite3/sqlite3_exec",children:"sqlite3_exec"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/sqlite3/sqlite3_open_v2",children:"sqlite3_open_v2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/sqlite3/sqlite3_get_table",children:"sqlite3_get_table"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/sqlite3/sqlite3_value_free",children:"sqlite3_value_free"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);