"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[33011],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var r=i(96540);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},86901:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"projects/libzip/api_zip_source_window_create","title":"api_zip_source_window_create","description":"API Overview","source":"@site/docs/projects/libzip/api_zip_source_window_create.md","sourceDirName":"projects/libzip","slug":"/projects/libzip/api_zip_source_window_create","permalink":"/vulrule/projects/libzip/api_zip_source_window_create","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_zip_source_window","permalink":"/vulrule/projects/libzip/api_zip_source_window"},"next":{"title":"api_zip_source_zip","permalink":"/vulrule/projects/libzip/api_zip_source_zip"}}');var t=i(74848),o=i(28453);const s={},c=void 0,l={},a=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"zip_source_window_create"})," is an API in ",(0,t.jsx)(n.strong,{children:"libzip"}),". This rule belongs to the ",(0,t.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,t.jsx)(n.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Parameter 1 of zip_source_window_create must be released by calling zip_source_free, with the same object passed as the 1-th argument to zip_source_free"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Tags: ",(0,t.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,t.jsxs)(n.li,{children:["Parameter Index: ",(0,t.jsx)(n.strong,{children:"0"})]}),"\n",(0,t.jsxs)(n.li,{children:["CWE Type: ",(0,t.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("zip_source_window_create")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("zip_source_free")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("zip_source_window_create")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);