"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[37168],{28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var t=o(96540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},75257:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"projects/openssl/api_bio_do_connect","title":"api_bio_do_connect","description":"API Overview","source":"@site/docs/projects/openssl/api_bio_do_connect.md","sourceDirName":"projects/openssl","slug":"/projects/openssl/api_bio_do_connect","permalink":"/vulrule/projects/openssl/api_bio_do_connect","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_bio_do_accept","permalink":"/vulrule/projects/openssl/api_bio_do_accept"},"next":{"title":"api_bio_do_connect_retry","permalink":"/vulrule/projects/openssl/api_bio_do_connect_retry"}}');var r=o(74848),i=o(28453);const s={},c=void 0,l={},a=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"BIO_do_connect"})," is an API in ",(0,r.jsx)(n.strong,{children:"openssl"}),". This rule belongs to the ",(0,r.jsx)(n.strong,{children:"return value check"})," type. This rule is generated using ",(0,r.jsx)(n.a,{href:"../../tools/AURC",children:"AURC"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"BIO_do_connect() returns 1 if the connection was successfully established and 0 or -1 if the connection failed."})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Tags: ",(0,r.jsx)(n.strong,{children:"return value check"})]}),"\n",(0,r.jsx)(n.li,{children:"Parameter Index: ****"}),"\n",(0,r.jsxs)(n.li,{children:["CWE Type: ",(0,r.jsx)(n.strong,{children:"CWE-253"})]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import cpp\n\nclass OpenSSLFunctionCall extends FunctionCall {\n  OpenSSLFunctionCall() {\n    this.getTarget().hasName("BIO_do_connect")\n  }\n}\n\nfrom OpenSSLFunctionCall call, UnaryOperation uop\nwhere\n  uop.getOperator() = "!" and\n  uop.getOperand() = call.getAnAccess()\nselect uop, "This negation checks the return value of BIO_do_connect."\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);