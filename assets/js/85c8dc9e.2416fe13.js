"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[50078],{20571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"projects/linux kernel/api_meson_nand_op_get_dma_safe_output_buf","title":"api_meson_nand_op_get_dma_safe_output_buf","description":"API Overview","source":"@site/docs/projects/linux kernel/api_meson_nand_op_get_dma_safe_output_buf.md","sourceDirName":"projects/linux kernel","slug":"/projects/linux kernel/api_meson_nand_op_get_dma_safe_output_buf","permalink":"/vulrule/projects/linux kernel/api_meson_nand_op_get_dma_safe_output_buf","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_meson_nand_op_get_dma_safe_input_buf","permalink":"/vulrule/projects/linux kernel/api_meson_nand_op_get_dma_safe_input_buf"},"next":{"title":"api_metadata_dst_alloc","permalink":"/vulrule/projects/linux kernel/api_metadata_dst_alloc"}}');var a=t(74848),r=t(28453);const s={},l=void 0,i={},u=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function _(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"meson_nand_op_get_dma_safe_output_buf"})," is an API in ",(0,a.jsx)(n.strong,{children:"Linux kernel"}),". This rule belongs to the ",(0,a.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,a.jsx)(n.a,{href:"../../tools/APISpecGen",children:"APISpecGen"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"The resource acquired by meson_nand_op_get_dma_safe_output_buf must be properly released using meson_nand_op_put_dma_safe_output_buf"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Tags: ",(0,a.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,a.jsxs)(n.li,{children:["Parameter Index: ",(0,a.jsx)(n.strong,{children:"N/A"})]}),"\n",(0,a.jsxs)(n.li,{children:["CWE Type: ",(0,a.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,a.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("meson_nand_op_get_dma_safe_output_buf")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("meson_nand_op_put_dma_safe_output_buf")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("meson_nand_op_get_dma_safe_output_buf")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n    \n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(_,{...e})}):_(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(96540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);