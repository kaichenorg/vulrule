"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[74024],{6564:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"projects/libcurl/api_curl_getdate","title":"api_curl_getdate","description":"API Overview","source":"@site/docs/projects/libcurl/api_curl_getdate.md","sourceDirName":"projects/libcurl","slug":"/projects/libcurl/api_curl_getdate","permalink":"/vulrule/projects/libcurl/api_curl_getdate","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_curl_free","permalink":"/vulrule/projects/libcurl/api_curl_free"},"next":{"title":"api_curl_mime_addpart","permalink":"/vulrule/projects/libcurl/api_curl_mime_addpart"}}');var i=t(74848),a=t(28453);const s={},c=void 0,o={},l=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"curl_getdate"})," is an API in ",(0,i.jsx)(e.strong,{children:"libcurl"}),". This rule belongs to the ",(0,i.jsx)(e.strong,{children:"parameter check"})," type. This rule is generated using ",(0,i.jsx)(e.a,{href:"../../tools/GPTAid",children:"GPTAid"}),"."]}),"\n",(0,i.jsx)(e.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,i.jsx)(e.admonition,{type:"tip",children:(0,i.jsx)(e.p,{children:"Parameter 1 must not be NULL."})}),"\n",(0,i.jsx)(e.admonition,{type:"info",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Tags: ",(0,i.jsx)(e.strong,{children:"parameter check"})]}),"\n",(0,i.jsxs)(e.li,{children:["Parameter Index: ",(0,i.jsx)(e.strong,{children:"0"})]}),"\n",(0,i.jsxs)(e.li,{children:["CWE Type: ",(0,i.jsx)(e.strong,{children:"CWE-476"})]}),"\n"]})}),"\n",(0,i.jsx)(e.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'/**\n * @name parameterCheck\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/paracheck\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \n     \n Expr getSinkExpr(FunctionCall fc)\n {\n     //Change\n result = fc.getArgument(0)\n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n     // Change\n fc.getTarget().hasName("curl_getdate")\n }\n GuardCondition getGuard(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n     exists(Expr e, Variable a| e = getSinkExpr(fc)\n    //  and isLocalVariable(a)\n     and a.getAnAccess() = e\n     and exists(GuardCondition g, Expr ge| \n         a.getAnAccess() = ge\n         and g.getASuccessor*() = fc\n         and g.getAChild*() = ge\n         and not exists(FunctionCall fc_in | \n            g.getAChild*() = fc_in\n            and fc_in.getAnArgument() = a.getAnAccess()\n            )\n         and result = g\n         )\n     )\n }\n \n// predicate getMalloc(FunctionCall fc) {\n//   fc.getTarget().hasName("malloc")\n  \n// }\n\n class PathConfiguration extends DataFlow::Configuration {\n    PathConfiguration() { this = "PathConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(AssignExpr a | \n        source.asExpr() = a.getRValue()\n        and exists(Variable v | \n          v.getAnAccess() = a.getRValue()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n         )\n         or exists(Variable v | \n          source.asExpr() = v.getInitializer().getExpr()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n          or\n          exists(FunctionCall fc |\n            source.asExpr() = fc)\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n        isSinkFC(fc)\n        and\n        sink.asExpr() = getSinkExpr(fc)\n    )\n     }\n   }\n\n\npredicate hasFlowtoAPI(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n    exists(PathConfiguration p, DataFlow::Node source| \n        p.hasFlow(source, DataFlow::exprNode(getSinkExpr(fc)))\n    \n        )\n}\n//  predicate \n\n\npredicate hasSpecifiedFunctionInThen(FunctionCall fc) {\n    // isSinkFC(fc) \n    // and isuseSamePara(fc, barrier)\n    // and\n    exists(IfStmt ifStmt | \n      fc.getEnclosingStmt() = ifStmt.getThen().getAChild*()\n      and not exists(Stmt elseStmt | elseStmt = ifStmt.getElse())\n        )\n  }\n\n  class ExcludeArrayAndConstantPointer extends Variable {\n    ExcludeArrayAndConstantPointer() {\n      exists(Type t |\n        // Exclude array types\n        t = this.getType() and\n        t instanceof ArrayType or\n  \n        // Exclude constant pointer types\n        t = this.getType() and\n        t instanceof PointerType and\n        exists(Expr initializer |\n            this.getInitializer().getExpr() = initializer and\n            initializer instanceof StringLiteral)\n      )\n    }\n  }\n\n  predicate isuseSamePara(FunctionCall target, FunctionCall barrier) {\n    isSinkFC(target)\n    and\n    exists(Variable v, Expr p| \n        p = getSinkExpr(target)\n        and\n        barrier.getAnArgument() = v.getAnAccess()\n        and v.getAnAccess() = p\n        and barrier.getASuccessor+() = target\n        )\n}\n\n from FunctionCall target\n where\n (isSinkFC(target)\n and hasFlowtoAPI(target)\n and not exists(GuardCondition g| \n     g = getGuard(target)\n    //  and source.getASuccessor*() = g\n     )\nand exists(Expr e, LocalVariable a| e = getSinkExpr(target)\n//  and isLocalVariable(a)\n and a.getAnAccess() = e.getAChild*()\n)\nand not exists(AddressOfExpr ae | \n    ae = getSinkExpr(target)))\n\n    and \n    (\n\n        (not exists(FunctionCall barrier | isuseSamePara(target, barrier)))\n    or (\n        exists(FunctionCall barrier | \n        isuseSamePara(target, barrier)\n        and hasSpecifiedFunctionInThen(barrier)\n        )\n        )\n\n    )\n\n    and exists(Variable v | \n        v.getAnAccess() = getSinkExpr(target)\n        and not v instanceof ExcludeArrayAndConstantPointer\n        )\n select target, target.getLocation().toString()\n'})})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var r=t(96540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);