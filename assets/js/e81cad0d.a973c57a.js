"use strict";(self.webpackChunkvulrule_docusaurus=self.webpackChunkvulrule_docusaurus||[]).push([[85595],{59855:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"libraries/libpcap/pcap_findalldevs","title":"pcap_findalldevs","description":"libpcap","source":"@site/docs/libraries/libpcap/pcap_findalldevs.md","sourceDirName":"libraries/libpcap","slug":"/libraries/libpcap/pcap_findalldevs","permalink":"/vulrule/libraries/libpcap/pcap_findalldevs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"pcap_dump_open","permalink":"/vulrule/libraries/libpcap/pcap_dump_open"},"next":{"title":"pcap_free_datalinks","permalink":"/vulrule/libraries/libpcap/pcap_free_datalinks"}}');var r=a(74848),l=a(28453),c=a(29800);const i={sidebar_position:1},s="pcap_findalldevs",o={},p=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u4f7f\u7528\u89c4\u5219",id:"\u4f7f\u7528\u89c4\u5219",level:2},{value:"\u76f8\u5173API",id:"\u76f8\u5173api",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pcap_findalldevs",children:"pcap_findalldevs"})}),"\n",(0,r.jsxs)("div",{className:"api-metadata",children:[(0,r.jsx)("span",{className:"api-library",children:"libpcap"}),(0,r.jsx)("span",{className:"api-category",children:"Api Pair"})]}),"\n",(0,r.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,r.jsxs)(n.p,{children:["pcap_findalldevs \u662f libpcap \u5e93\u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5API\u5c5e\u4e8e ",(0,r.jsx)(n.strong,{children:"Api Pair"})," \u7c7b\u578b\u7684\u89c4\u5219\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"\u4f7f\u7528\u89c4\u5219",children:"\u4f7f\u7528\u89c4\u5219"}),"\n",(0,r.jsxs)(n.p,{children:["\u7531 ",(0,r.jsx)(n.a,{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,r.jsx)(c.A,{ruleName:"\u89c4\u5219 1",ruleType:"Api Pair",ruleData:{Description:"Parameter 1 must be freed when no longer needed.",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-404"],QLCode:'/**\n * @name mallocfree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/memleak\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("pcap_findalldevs") and e = fc.getArgument(0))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("free")\nor fc.getTarget().hasName("pcap_close")\nor fc.getTarget().hasName("pcap_freecode")\nor fc.getTarget().hasName("pcap_freealldevs")\nor fc.getTarget().hasName("pcap_dump_close")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        // TODO-addFreeHere\n        )\n}\n\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n fc.getTarget().hasName("pcap_findalldevs")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("free")\nor fc.getTarget().hasName("pcap_close")\nor fc.getTarget().hasName("pcap_freecode")\nor fc.getTarget().hasName("pcap_freealldevs")\nor fc.getTarget().hasName("pcap_dump_close")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n    isSourceFC(target)\n    and result = target\n    )\n}\n   \nControlFlowNode getAfterNode(ControlFlowNode target) {\n    isSourceFC(target)\n    and\n    exists(FunctionCall fc | \n        target.getASuccessor*() = fc\n        and result = fc\n        and isSinkFC(fc)\n        and exists(MallocConfiguration cfg| \n            cfg.hasFlow(getSourceNode(target), getSinkNode(fc))\n            )\n        )\n}\n\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalAfter(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getAfterNode(target)\n    and\n    exists(BasicBlock bb | \n        bb.getAPredecessor().getANode() = node\n        and bb.getAPredecessor().getANode() = target\n        )\n}\n\n //   if every path after target exists node\nBasicBlock getLeakBBAfter(ControlFlowNode target) {\n     not exists(ControlFlowNode node | \n        node = getAfterNode(target)\n        and (not\n        exists(BasicBlock bb | \n            not bb.getANode() = node\n            and bb = target.getASuccessor*()\n            and exists(ExitBasicBlock exit | \n                bb.getASuccessor*() = exit)\n            and target.getASuccessor*() = bb\n            and not bb.getAPredecessor*() = node.getBasicBlock()\n            and not bb.getASuccessor*() = node.getBasicBlock()\n            and result = bb\n         )\n         and not isConditionalAfter(node, target)\n        )\n     )\n    \n }\n \n \n predicate isLocalVariable(Expr e) {\n    exists(FunctionCall fc| \n        fc = e \n        and\n        exists(AssignExpr ae, LocalVariable lv| \n        ae.getAChild() = fc \n        and lv.getAnAccess() = ae.getLValue()\n        )\n        or exists(LocalVariable lv| \n            lv.getInitializer().getExpr() = e\n            )\n    )\n        or\n\n     exists(LocalVariable lv | \n        \n            lv.getAnAccess() = e.getAChild*()\n            )\n }\n\n \n from FunctionCall target\n where\n target = getTargetNode()\n and \nisLocalVariable(getMallocExpr(target))\n \n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBAfter(target) )\n select target, target.getLocation().toString()'}]}}),"\n",(0,r.jsxs)(n.p,{children:["\u7531 ",(0,r.jsx)(n.a,{href:"/tools/chatdetector",children:"ChatDetector"})," \u751f\u6210"]}),"\n",(0,r.jsx)(c.A,{ruleName:"\u89c4\u5219 2",ruleType:"Api Pair",ruleData:{Description:"Parameter 1 of pcap_findalldevs must be released by calling pcap_freealldevs, with the same object passed as the 1-th argument to pcap_freealldevs",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-404"],QLCode:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("pcap_findalldevs")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("pcap_freealldevs")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("pcap_findalldevs")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()'}]}}),"\n",(0,r.jsx)(n.h2,{id:"\u76f8\u5173api",children:"\u76f8\u5173API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/libpcap/pcap_compile",children:"pcap_compile"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/libpcap/pcap_close",children:"pcap_close"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/libpcap/pcap_freealldevs",children:"pcap_freealldevs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/libpcap/pcap_free_tstamp_types",children:"pcap_free_tstamp_types"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/libraries/libpcap/pcap_free_datalinks",children:"pcap_free_datalinks"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);