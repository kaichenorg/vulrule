"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[62936],{1995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"projects/libpcap/api_pcap_list_tstamp_types","title":"api_pcap_list_tstamp_types","description":"API Overview","source":"@site/docs/projects/libpcap/api_pcap_list_tstamp_types.md","sourceDirName":"projects/libpcap","slug":"/projects/libpcap/api_pcap_list_tstamp_types","permalink":"/vulrule/projects/libpcap/api_pcap_list_tstamp_types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_pcap_list_datalinks","permalink":"/vulrule/projects/libpcap/api_pcap_list_datalinks"},"next":{"title":"api_pcap_loop","permalink":"/vulrule/projects/libpcap/api_pcap_loop"}}');var s=n(74848),i=n(28453);const l={},r=void 0,p={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function o(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"pcap_list_tstamp_types"})," is an API in ",(0,s.jsx)(t.strong,{children:"libpcap"}),". This rule belongs to the ",(0,s.jsx)(t.strong,{children:"api pair"})," type. This rule is generated using ",(0,s.jsx)(t.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"Parameter 2 of pcap_list_tstamp_types must be released by calling pcap_free_datalinks, with the same object passed as the 1-th argument to pcap_free_datalinks"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Tags: ",(0,s.jsx)(t.strong,{children:"api pair"})]}),"\n",(0,s.jsxs)(t.li,{children:["Parameter Index: ",(0,s.jsx)(t.strong,{children:"1"})]}),"\n",(0,s.jsxs)(t.li,{children:["CWE Type: ",(0,s.jsx)(t.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,s.jsx)(t.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("pcap_list_tstamp_types")\n  and result.asExpr() = fc.getArgument(1)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("pcap_free_datalinks")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("pcap_list_tstamp_types")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var a=n(96540);const s={},i=a.createContext(s);function l(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);