"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[10038],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var l=t(96540);const r={},o=l.createContext(r);function a(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),l.createElement(o.Provider,{value:n},e.children)}},47287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});const l=JSON.parse('{"id":"projects/linux kernel/api_convert_allocate_fpntbl","title":"api_convert_allocate_fpntbl","description":"API Overview","source":"@site/docs/projects/linux kernel/api_convert_allocate_fpntbl.md","sourceDirName":"projects/linux kernel","slug":"/projects/linux kernel/api_convert_allocate_fpntbl","permalink":"/vulrule/projects/linux kernel/api_convert_allocate_fpntbl","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_convert_allocate_dvs_6axis_config","permalink":"/vulrule/projects/linux kernel/api_convert_allocate_dvs_6axis_config"},"next":{"title":"api_convert_allocate_morph_plane","permalink":"/vulrule/projects/linux kernel/api_convert_allocate_morph_plane"}}');var r=t(74848),o=t(28453);const a={},i=void 0,c={},s=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"convert_allocate_fpntbl"})," is an API in ",(0,r.jsx)(n.strong,{children:"Linux kernel"}),". This rule belongs to the ",(0,r.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,r.jsx)(n.a,{href:"../../tools/APISpecGen",children:"APISpecGen"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"The resource acquired by convert_allocate_fpntbl must be properly released using ia_css_host_data_free"})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Tags: ",(0,r.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,r.jsx)(n.li,{children:"Parameter Index: ****"}),"\n",(0,r.jsxs)(n.li,{children:["CWE Type: ",(0,r.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'\n    import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("convert_allocate_fpntbl")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("ia_css_host_data_free")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("convert_allocate_fpntbl")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n    \n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);