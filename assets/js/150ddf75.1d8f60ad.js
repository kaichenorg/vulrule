"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[52331],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},l=s.createContext(i);function r(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:t},e.children)}},93039:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"projects/libdbus/api_dbus_listen_tcp_socket","title":"api_dbus_listen_tcp_socket","description":"API Overview","source":"@site/docs/projects/libdbus/api_dbus_listen_tcp_socket.md","sourceDirName":"projects/libdbus","slug":"/projects/libdbus/api_dbus_listen_tcp_socket","permalink":"/vulrule/projects/libdbus/api_dbus_listen_tcp_socket","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_dbus_list_free_link","permalink":"/vulrule/projects/libdbus/api_dbus_list_free_link"},"next":{"title":"api_dbus_mem_pool_alloc","permalink":"/vulrule/projects/libdbus/api_dbus_mem_pool_alloc"}}');var i=n(74848),l=n(28453);const r={},o=void 0,c={},a=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"_dbus_listen_tcp_socket"})," is an API in ",(0,i.jsx)(t.strong,{children:"libdbus"}),". This rule belongs to the ",(0,i.jsx)(t.strong,{children:"api pair"})," type. This rule is generated using ",(0,i.jsx)(t.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Parameter 5 of _dbus_listen_tcp_socket must be released by calling dbus_bus_request_name, with the same object passed as the 2-th argument to dbus_bus_request_name"})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Tags: ",(0,i.jsx)(t.strong,{children:"api pair"})]}),"\n",(0,i.jsxs)(t.li,{children:["Parameter Index: ",(0,i.jsx)(t.strong,{children:"4"})]}),"\n",(0,i.jsxs)(t.li,{children:["CWE Type: ",(0,i.jsx)(t.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,i.jsx)(t.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("_dbus_listen_tcp_socket")\n  and result.asExpr() = fc.getArgument(4)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("dbus_bus_request_name")\n  and result.asExpr() = fc.getArgument(1)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("_dbus_listen_tcp_socket")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n'})})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);