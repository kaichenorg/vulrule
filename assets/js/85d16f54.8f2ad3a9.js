"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[52220],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var l=r(96540);const t={},i=l.createContext(t);function a(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),l.createElement(i.Provider,{value:n},e.children)}},36679:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"projects/linux kernel/api_qib_user_sdma_alloc_header","title":"api_qib_user_sdma_alloc_header","description":"API Overview","source":"@site/docs/projects/linux kernel/api_qib_user_sdma_alloc_header.md","sourceDirName":"projects/linux kernel","slug":"/projects/linux kernel/api_qib_user_sdma_alloc_header","permalink":"/vulrule/projects/linux kernel/api_qib_user_sdma_alloc_header","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_qh_get","permalink":"/vulrule/projects/linux kernel/api_qh_get"},"next":{"title":"api_ql_alloc_buffer_queues","permalink":"/vulrule/projects/linux kernel/api_ql_alloc_buffer_queues"}}');var t=r(74848),i=r(28453);const a={},s=void 0,o={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"qib_user_sdma_alloc_header"})," is an API in ",(0,t.jsx)(n.strong,{children:"Linux kernel"}),". This rule belongs to the ",(0,t.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,t.jsx)(n.a,{href:"../../tools/APISpecGen",children:"APISpecGen"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"The resource acquired by qib_user_sdma_alloc_header must be properly released using kfree"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Tags: ",(0,t.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,t.jsx)(n.li,{children:"Parameter Index: ****"}),"\n",(0,t.jsxs)(n.li,{children:["CWE Type: ",(0,t.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'\n    import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("qib_user_sdma_alloc_header")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("kfree")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("qib_user_sdma_alloc_header")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n    \n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);