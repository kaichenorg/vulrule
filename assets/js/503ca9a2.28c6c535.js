"use strict";(self.webpackChunkvulrule_docusaurus=self.webpackChunkvulrule_docusaurus||[]).push([[19597],{75105:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"libraries/libpcap/pcap_freecode","title":"pcap_freecode","description":"libpcap","source":"@site/docs/libraries/libpcap/pcap_freecode.md","sourceDirName":"libraries/libpcap","slug":"/libraries/libpcap/pcap_freecode","permalink":"/vulrule/libraries/libpcap/pcap_freecode","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"pcap_freealldevs","permalink":"/vulrule/libraries/libpcap/pcap_freealldevs"},"next":{"title":"pcap_get_selectable_fd","permalink":"/vulrule/libraries/libpcap/pcap_get_selectable_fd"}}');var t=a(74848),i=a(28453),c=a(29800);const l={sidebar_position:1},o="pcap_freecode",s={},p=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u4f7f\u7528\u89c4\u5219",id:"\u4f7f\u7528\u89c4\u5219",level:2},{value:"\u76f8\u5173API",id:"\u76f8\u5173api",level:2}];function d(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"pcap_freecode",children:"pcap_freecode"})}),"\n",(0,t.jsxs)("div",{className:"api-metadata",children:[(0,t.jsx)("span",{className:"api-library",children:"libpcap"}),(0,t.jsx)("span",{className:"api-category",children:"Parameter Check"})]}),"\n",(0,t.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,t.jsxs)(n.p,{children:["pcap_freecode \u662f libpcap \u5e93\u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5API\u5c5e\u4e8e ",(0,t.jsx)(n.strong,{children:"Parameter Check"})," \u7c7b\u578b\u7684\u89c4\u5219\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u4f7f\u7528\u89c4\u5219",children:"\u4f7f\u7528\u89c4\u5219"}),"\n",(0,t.jsxs)("div",{className:"rule-tool-info",children:["\u7531 ",(0,t.jsx)("a",{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,t.jsx)(c.A,{ruleName:"\u89c4\u5219 1",ruleType:"Parameter Check",ruleData:{Description:"Parameter 1 must not be NULL.",Label:["parameter check"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-476"],QLCode:'/**\n * @name parameterCheck\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/paracheck\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \n     \n Expr getSinkExpr(FunctionCall fc)\n {\n     //Change\n result = fc.getArgument(0)\n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n     // Change\n fc.getTarget().hasName("pcap_freecode")\n }\n GuardCondition getGuard(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n     exists(Expr e, Variable a| e = getSinkExpr(fc)\n    //  and isLocalVariable(a)\n     and a.getAnAccess() = e\n     and exists(GuardCondition g, Expr ge| \n         a.getAnAccess() = ge\n         and g.getASuccessor*() = fc\n         and g.getAChild*() = ge\n         and not exists(FunctionCall fc_in | \n            g.getAChild*() = fc_in\n            and fc_in.getAnArgument() = a.getAnAccess()\n            )\n         and result = g\n         )\n     )\n }\n \n// predicate getMalloc(FunctionCall fc) {\n//   fc.getTarget().hasName("malloc")\n  \n// }\n\n class PathConfiguration extends DataFlow::Configuration {\n    PathConfiguration() { this = "PathConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(AssignExpr a | \n        source.asExpr() = a.getRValue()\n        and exists(Variable v | \n          v.getAnAccess() = a.getRValue()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n         )\n         or exists(Variable v | \n          source.asExpr() = v.getInitializer().getExpr()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n          or\n          exists(FunctionCall fc |\n            source.asExpr() = fc)\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n        isSinkFC(fc)\n        and\n        sink.asExpr() = getSinkExpr(fc)\n    )\n     }\n   }\n\n\npredicate hasFlowtoAPI(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n    exists(PathConfiguration p, DataFlow::Node source| \n        p.hasFlow(source, DataFlow::exprNode(getSinkExpr(fc)))\n    \n        )\n}\n//  predicate \n\n\npredicate hasSpecifiedFunctionInThen(FunctionCall fc) {\n    // isSinkFC(fc) \n    // and isuseSamePara(fc, barrier)\n    // and\n    exists(IfStmt ifStmt | \n      fc.getEnclosingStmt() = ifStmt.getThen().getAChild*()\n      and not exists(Stmt elseStmt | elseStmt = ifStmt.getElse())\n        )\n  }\n\n  class ExcludeArrayAndConstantPointer extends Variable {\n    ExcludeArrayAndConstantPointer() {\n      exists(Type t |\n        // Exclude array types\n        t = this.getType() and\n        t instanceof ArrayType or\n  \n        // Exclude constant pointer types\n        t = this.getType() and\n        t instanceof PointerType and\n        exists(Expr initializer |\n            this.getInitializer().getExpr() = initializer and\n            initializer instanceof StringLiteral)\n      )\n    }\n  }\n\n  predicate isuseSamePara(FunctionCall target, FunctionCall barrier) {\n    isSinkFC(target)\n    and\n    exists(Variable v, Expr p| \n        p = getSinkExpr(target)\n        and\n        barrier.getAnArgument() = v.getAnAccess()\n        and v.getAnAccess() = p\n        and barrier.getASuccessor+() = target\n        )\n}\n\n from FunctionCall target\n where\n (isSinkFC(target)\n and hasFlowtoAPI(target)\n and not exists(GuardCondition g| \n     g = getGuard(target)\n    //  and source.getASuccessor*() = g\n     )\nand exists(Expr e, LocalVariable a| e = getSinkExpr(target)\n//  and isLocalVariable(a)\n and a.getAnAccess() = e.getAChild*()\n)\nand not exists(AddressOfExpr ae | \n    ae = getSinkExpr(target)))\n\n    and \n    (\n\n        (not exists(FunctionCall barrier | isuseSamePara(target, barrier)))\n    or (\n        exists(FunctionCall barrier | \n        isuseSamePara(target, barrier)\n        and hasSpecifiedFunctionInThen(barrier)\n        )\n        )\n\n    )\n\n    and exists(Variable v | \n        v.getAnAccess() = getSinkExpr(target)\n        and not v instanceof ExcludeArrayAndConstantPointer\n        )\n select target, target.getLocation().toString()'}]}}),"\n",(0,t.jsxs)("div",{className:"rule-tool-info",children:["\u7531 ",(0,t.jsx)("a",{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,t.jsx)(c.A,{ruleName:"\u89c4\u5219 2",ruleType:"Parameter Check",ruleData:{Description:"Parameter 1 must not be used later.",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-416"],QLCode:'/**\n * @name UAF\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/UAF\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("malloc") and e = fc)\n or (fc.getTarget().hasName("pcap_compile") and e = fc.getArgument(1))\n or (fc.getTarget().hasName("pcap_findalldevs") and e = fc.getArgument(0))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            // TODO-Target-change\n            fc.getTarget().hasName("pcap_freecode")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        \n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n// // TODO-addMallocFCHere\n fc.getTarget().hasName("malloc")\n or fc.getTarget().hasName("pcap_compile")\n or fc.getTarget().hasName("pcap_findalldevs")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("pcap_freecode")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n    override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n         isSourceFC(fc)\n         and\n         source = getSourceNode(fc)\n          )\n          or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n      }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(Expr e |\n         sink.asExpr() = e\n         or sink.asDefiningArgument() = e\n       )\n     }\n   }\n//  target is a free function\nfrom FunctionCall target, Expr use\nwhere\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and target.getAPredecessor*() = malloc)\nand not target.getAnArgument() = use\nand target.getASuccessor*() = use\n//  and \n// isLocalVariable(getMallocExpr(target))\nand  exists(Variable v| \n   v.getAnAccess() = use\n   and v.getAnAccess() = getFreeExpr(target)\n   and not exists(Expr malloc, MallocConfiguration cfg | \n       use.getAPredecessor*() = malloc \n   and malloc.getAPredecessor*() = target\n   and\n   cfg.hasFlow(DataFlow::exprNode(malloc), DataFlow::exprNode(use))\n   )\n       )\n\nselect target, "Freed in " + target.getLocation().toString() + ". Used in " + use.getLocation().toString()\n'}]}}),"\n",(0,t.jsxs)("div",{className:"rule-tool-info",children:["\u7531 ",(0,t.jsx)("a",{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,t.jsx)(c.A,{ruleName:"\u89c4\u5219 3",ruleType:"Parameter Check",ruleData:{Description:"Parameter 1 must be allocated before.",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-590"],QLCode:'/**\n * @name freemalloc\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/freeMmalloc\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("malloc") and e = fc)\n or (fc.getTarget().hasName("pcap_compile") and e = fc.getArgument(1))\n or (fc.getTarget().hasName("pcap_findalldevs") and e = fc.getArgument(0))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("pcap_freecode")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        // TODO-addFreeHere\n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n fc.getTarget().hasName("malloc")\n or fc.getTarget().hasName("pcap_compile")\n or fc.getTarget().hasName("pcap_findalldevs")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("pcap_freecode")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\n predicate isLocalVariable(Expr e) {\n     exists(LocalVariable lv | \n        exists(FunctionCall fc| \n            fc = e and\n            exists(AssignExpr ae | \n            ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n        )\n            or\n            lv.getAnAccess() = e\n            )\n }\n \n from FunctionCall target\n where\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and target.getAPredecessor*() = malloc)\n//  and \n// isLocalVariable(getMallocExpr(target))\n and not \n exists(MallocConfiguration cfg, FunctionCall malloc| \n    isSourceFC(malloc)\n    and malloc.getASuccessor*() = target\n    and\n    cfg.hasFlow(getSourceNode(malloc), getSinkNode(target))\n    )\n\n select target, target.getLocation().toString()\n '}]}}),"\n",(0,t.jsxs)("div",{className:"rule-tool-info",children:["\u7531 ",(0,t.jsx)("a",{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,t.jsx)(c.A,{ruleName:"\u89c4\u5219 4",ruleType:"Parameter Check",ruleData:{Description:"Parameter 1 must not be freed later.",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-415"],QLCode:'/**\n * @name doublefree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/doublefree\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("malloc") and e = fc)\n or (fc.getTarget().hasName("pcap_compile") and e = fc.getArgument(1))\n or (fc.getTarget().hasName("pcap_findalldevs") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("pcap_freecode")\n        // or\n        //  fc.getTarget().hasName("target")\n        // TODO-addFreeHere\n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n\n fc.getTarget().hasName("malloc")\n or fc.getTarget().hasName("pcap_compile")\n or fc.getTarget().hasName("pcap_findalldevs")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("pcap_freecode")\n//  or\n//  fc.getTarget().hasName("target")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n         or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\n//  predicate isLocalVariable(Expr e) {\n//      exists(LocalVariable lv | \n//         exists(FunctionCall fc| \n//             fc = e and\n//             exists(AssignExpr ae | \n//             ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n//         )\n//             or\n//             lv.getAnAccess() = e\n//             )\n//  }\n \n from FunctionCall target, FunctionCall free\n where\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and free.getAPredecessor*() = malloc)\nand\nisSinkFC(free)\n   and free.getASuccessor*() = target\n   and not free = target\nand exists(Variable v | \n    \n    v.getAnAccess() = getFreeExpr(target)\n    and v.getAnAccess() = getFreeExpr(free)\n//  and \n// isLocalVariable(getMallocExpr(target))\n and not \n exists(MallocConfiguration cfg, Expr malloc| \n    // isSourceFC(malloc)\n    free.getASuccessor*() = malloc\n    and malloc.getASuccessor*() = target\n    and\n    cfg.hasFlow(DataFlow::exprNode(malloc), getSinkNode(target))\n    )\n)\n select target, "First Freed in " + free.getLocation().toString() + ". Double free in " + target.getLocation().toString()\n '}]}}),"\n",(0,t.jsx)(n.h2,{id:"\u76f8\u5173api",children:"\u76f8\u5173API"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/libpcap/pcap_datalink",children:"pcap_datalink"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/libpcap/pcap_dump_close",children:"pcap_dump_close"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/libpcap/pcap_dump_ftell",children:"pcap_dump_ftell"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/libpcap/pcap_dump",children:"pcap_dump"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/libpcap/pcap_breakloop",children:"pcap_breakloop"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);