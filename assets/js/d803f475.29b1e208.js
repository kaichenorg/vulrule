"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[5418],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var t=n(96540);const r={},a=t.createContext(r);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:s},e.children)}},48956:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"projects/libdbus/api_dbus_message_get_args","title":"api_dbus_message_get_args","description":"API Overview","source":"@site/docs/projects/libdbus/api_dbus_message_get_args.md","sourceDirName":"projects/libdbus","slug":"/projects/libdbus/api_dbus_message_get_args","permalink":"/vulrule/projects/libdbus/api_dbus_message_get_args","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_dbus_message_free_data_slot","permalink":"/vulrule/projects/libdbus/api_dbus_message_free_data_slot"},"next":{"title":"api_dbus_message_iter_abandon_container","permalink":"/vulrule/projects/libdbus/api_dbus_message_iter_abandon_container"}}');var r=n(74848),a=n(28453);const i={},l=void 0,o={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"dbus_message_get_args"})," is an API in ",(0,r.jsx)(s.strong,{children:"libdbus"}),". This rule belongs to the ",(0,r.jsx)(s.strong,{children:"api pair"})," type. This rule is generated using ",(0,r.jsx)(s.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,r.jsx)(s.admonition,{type:"tip",children:(0,r.jsx)(s.p,{children:"Parameter 1 of dbus_message_get_args must be released by calling dbus_message_unref, with the same object passed as the 1-th argument to dbus_message_unref"})}),"\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Tags: ",(0,r.jsx)(s.strong,{children:"api pair"})]}),"\n",(0,r.jsxs)(s.li,{children:["Parameter Index: ",(0,r.jsx)(s.strong,{children:"0"})]}),"\n",(0,r.jsxs)(s.li,{children:["CWE Type: ",(0,r.jsx)(s.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,r.jsx)(s.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("dbus_message_get_args")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("dbus_message_unref")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("dbus_message_get_args")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n'})})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);