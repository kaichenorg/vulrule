"use strict";(self.webpackChunkvulrule_docusaurus=self.webpackChunkvulrule_docusaurus||[]).push([[48041],{19240:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"libraries/libzip/zip_close","title":"zip_close","description":"libzip","source":"@site/docs/libraries/libzip/zip_close.md","sourceDirName":"libraries/libzip","slug":"/libraries/libzip/zip_close","permalink":"/vulrule/libraries/libzip/zip_close","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"libzip \u5e93","permalink":"/vulrule/libraries/libzip/"},"next":{"title":"zip_discard","permalink":"/vulrule/libraries/libzip/zip_discard"}}');var a=r(74848),i=r(28453),o=r(29800);const s={sidebar_position:1},c="zip_close",l={},d=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u4f7f\u7528\u89c4\u5219",id:"\u4f7f\u7528\u89c4\u5219",level:2},{value:"\u76f8\u5173API",id:"\u76f8\u5173api",level:2}];function g(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"zip_close",children:"zip_close"})}),"\n",(0,a.jsxs)("div",{className:"api-metadata",children:[(0,a.jsx)("span",{className:"api-library",children:"libzip"}),(0,a.jsx)("span",{className:"api-category",children:"Initialization"})]}),"\n",(0,a.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,a.jsxs)(n.p,{children:["zip_close \u662f libzip \u5e93\u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5API\u5c5e\u4e8e ",(0,a.jsx)(n.strong,{children:"Initialization"})," \u7c7b\u578b\u7684\u89c4\u5219\u3002"]}),"\n",(0,a.jsx)(n.h2,{id:"\u4f7f\u7528\u89c4\u5219",children:"\u4f7f\u7528\u89c4\u5219"}),"\n",(0,a.jsxs)(n.p,{children:["\u7531 ",(0,a.jsx)(n.a,{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,a.jsx)(o.A,{ruleName:"\u89c4\u5219 1",ruleType:"Initialization",ruleData:{Description:"Parameter 1 must be initialized.",Label:["initialization"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-457"],QLCode:'/**\n * @name uninitialize\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/uninitialize\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n\n predicate isSourceFC(FunctionCall fc)\n {\n fc.getTarget().hasName("initialize")\n }\n\n//  DataFlow::Node getSourceNode(FunctionCall fc)\n//  {\n//      result.asExpr() = getMallocExpr(fc)\n//      or\n//      result.asDefiningArgument() = getMallocExpr(fc)\n//  }\n\n Expr getSinkExpr(FunctionCall fc)\n {\n    isSinkFC(fc)\n    and\n result = fc.getArgument(0) \n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("zip_close")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getSinkExpr(fc)\n     or\n     result.asDefiningArgument() = getSinkExpr(fc)\n }\n    \n class ParameterConfiguration extends DataFlow::Configuration {\n     ParameterConfiguration() { this = "ParameterConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n            isSourceFC(fc)\n            and\n            (source.asExpr() = fc\n            or\n            source.asExpr() = fc.getAnArgument()\n            or\n            source.asDefiningArgument() = fc.getAnArgument())\n            )\n        \n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n   predicate isFlow(Expr source, Expr sink) {\n    exists(ParameterConfiguration cfg | \n            cfg.hasFlow(DataFlow::exprNode(source), DataFlow::exprNode(sink))\n        )\n    \n}\n\n// predicate isFlow(Expr source, Expr sink) {\n//     exists(FunctionCall sourcefc, FunctionCall sinkfc| \n//         isSourceFC(sourcefc)\n//         and isSinkFC(sinkfc)\n//         and (source = sourcefc.getAnArgument() or source = sourcefc)\n//         and sink = getSinkExpr(sinkfc)\n//         and exists(ParameterConfiguration cfg | \n//             cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(sinkfc))\n//             )\n//         )\n    \n// }\n   \nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n        isSinkFC(target)\n    // target.getTarget().hasName("free")\n    and result = target\n    )\n}\n\nControlFlowNode getBeforeNode(FunctionCall target) {\n    exists(FunctionCall sourcefc, ParameterConfiguration cfg, Expr source| \n        isSourceFC(sourcefc)\n        and (source = sourcefc or source = sourcefc.getAnArgument())\n        and\n        cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(target))\n        and target.getAPredecessor*() = source\n        // and not e = target.getAnArgument()\n        and result = sourcefc)\n}\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalBefore(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getBeforeNode(target)\n    and not node.getBasicBlock() = target.getBasicBlock()\n    and\n    exists(BasicBlock bb | \n        bb.getASuccessor().getANode() = node\n        and bb.getASuccessor().getANode() = target\n        \n        )\n}\n\n\nBasicBlock getLeakBBBefore(ControlFlowNode target) {\n    isSinkFC(target)\n    and\n    // result.getASuccessor*() = target\n    // and\n    not exists(ControlFlowNode node | \n        node = getBeforeNode(target)\n        and (not\n        exists(BasicBlock bb | \n            bb.getASuccessor*() = target\n            // and bb.getAPredecessor*() = node\n            and not bb.getANode() = node\n        and result = bb\n        and not bb.getAPredecessor*() = node.getBasicBlock()\n        and not bb.getASuccessor*() = node.getBasicBlock()\n        )\n        and not isConditionalBefore(node, target)\n        )\n        )\n}\n\n \n predicate isLocalVariable(Expr e) {\n    exists(LocalVariable lv | \n       exists(FunctionCall fc| \n           fc = e and\n           exists(AssignExpr ae | \n           ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n       )\n           or\n           lv.getAnAccess() = e\n           )\n}\n \n\n \n \n from FunctionCall target\n where\n target = getTargetNode()\n and\n isLocalVariable(getSinkExpr(target))\n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBBefore(target))\n select target, target.getLocation().toString()\n '}]}}),"\n",(0,a.jsxs)(n.p,{children:["\u7531 ",(0,a.jsx)(n.a,{href:"/tools/chatdetector",children:"ChatDetector"})," \u751f\u6210"]}),"\n",(0,a.jsx)(o.A,{ruleName:"\u89c4\u5219 2",ruleType:"Initialization",ruleData:{Description:"Once a resource is passed as the 1-th argument to zip_close, it must not be used afterward.",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-416"],QLCode:'/**\n * @name UAF\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/UAF\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("zip_open") and e = fc)\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            // TODO-Target-change\n            fc.getTarget().hasName("Target_API")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        \n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n// // TODO-addMallocFCHere\n fc.getTarget().hasName("zip_open")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("Target_API")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n    override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n         isSourceFC(fc)\n         and\n         source = getSourceNode(fc)\n          )\n          or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n      }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(Expr e |\n         sink.asExpr() = e\n         or sink.asDefiningArgument() = e\n       )\n     }\n   }\n//  target is a free function\nfrom FunctionCall target, Expr use\nwhere\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and target.getAPredecessor*() = malloc)\nand not target.getAnArgument() = use\nand target.getASuccessor*() = use\n//  and \n// isLocalVariable(getMallocExpr(target))\nand  exists(Variable v| \n   v.getAnAccess() = use\n   and v.getAnAccess() = getFreeExpr(target)\n   and not exists(Expr malloc, MallocConfiguration cfg | \n       use.getAPredecessor*() = malloc \n   and malloc.getAPredecessor*() = target\n   and\n   cfg.hasFlow(DataFlow::exprNode(malloc), DataFlow::exprNode(use))\n   )\n       )\n\nselect target, "Freed in " + target.getLocation().toString() + ". Used in " + use.getLocation().toString()\n'}]}}),"\n",(0,a.jsxs)(n.p,{children:["\u7531 ",(0,a.jsx)(n.a,{href:"/tools/chatdetector",children:"ChatDetector"})," \u751f\u6210"]}),"\n",(0,a.jsx)(o.A,{ruleName:"\u89c4\u5219 3",ruleType:"Initialization",ruleData:{Description:"Once a resource is passed as the 1-th argument to zip_close, it must not be freed again.",Label:["api pair"],"Parameter-index":["0"],"cweType-and-QLCode":[{cweType:["CWE-415"],QLCode:'/**\n * @name doublefree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/doublefree\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("zip_open") and e = fc)\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("zip_close")\n        // or\n        //  fc.getTarget().hasName("target")\n        // TODO-addFreeHere\n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n\n fc.getTarget().hasName("zip_open")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("zip_close")\n//  or\n//  fc.getTarget().hasName("target")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n         or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\n from FunctionCall target, FunctionCall free\n where\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and free.getAPredecessor*() = malloc)\nand\nisSinkFC(free)\n   and free.getASuccessor*() = target\n   and not free = target\nand exists(Variable v | \n    \n    v.getAnAccess() = getFreeExpr(target)\n    and v.getAnAccess() = getFreeExpr(free)\n//  and \n// isLocalVariable(getMallocExpr(target))\n and not \n exists(MallocConfiguration cfg, Expr malloc| \n    // isSourceFC(malloc)\n    free.getASuccessor*() = malloc\n    and malloc.getASuccessor*() = target\n    and\n    cfg.hasFlow(DataFlow::exprNode(malloc), getSinkNode(target))\n    )\n)\n select target, "First Freed in " + free.getLocation().toString() + ". Double free in " + target.getLocation().toString()\n '}]}}),"\n",(0,a.jsx)(n.h2,{id:"\u76f8\u5173api",children:"\u76f8\u5173API"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/libzip/zip_name_locate",children:"zip_name_locate"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/libzip/zip_error_strerror",children:"zip_error_strerror"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/libzip/zip_file_is_seekable",children:"zip_file_is_seekable"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/libzip/zip_unchange_archive",children:"zip_unchange_archive"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/libraries/libzip/zip_source_seek_compute_offset",children:"zip_source_seek_compute_offset"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}}}]);