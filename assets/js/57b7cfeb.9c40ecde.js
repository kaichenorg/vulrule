"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[6072],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},62826:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"projects/ffmpeg/api_av_opt_copy","title":"api_av_opt_copy","description":"API Overview","source":"@site/docs/projects/ffmpeg/api_av_opt_copy.md","sourceDirName":"projects/ffmpeg","slug":"/projects/ffmpeg/api_av_opt_copy","permalink":"/vulrule/projects/ffmpeg/api_av_opt_copy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_av_new_program","permalink":"/vulrule/projects/ffmpeg/api_av_new_program"},"next":{"title":"api_av_opt_free","permalink":"/vulrule/projects/ffmpeg/api_av_opt_free"}}');var o=t(74848),a=t(28453);const i={},l=void 0,s={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"av_opt_copy"})," is an API in ",(0,o.jsx)(n.strong,{children:"FFmpeg"}),". This rule belongs to the ",(0,o.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,o.jsx)(n.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"Parameter 2 of av_opt_copy must be released by calling av_opt_free, with the same object passed as the 1-th argument to av_opt_free"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Tags: ",(0,o.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,o.jsxs)(n.li,{children:["Parameter Index: ",(0,o.jsx)(n.strong,{children:"1"})]}),"\n",(0,o.jsxs)(n.li,{children:["CWE Type: ",(0,o.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,o.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("av_opt_copy")\n  and result.asExpr() = fc.getArgument(1)\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("av_opt_free")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("av_opt_copy")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);