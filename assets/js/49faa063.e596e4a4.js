"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[59615],{28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>c});var t=n(96540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}},58578:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"projects/libzip/api_zip_source_buffer_create","title":"api_zip_source_buffer_create","description":"API Overview","source":"@site/docs/projects/libzip/api_zip_source_buffer_create.md","sourceDirName":"projects/libzip","slug":"/projects/libzip/api_zip_source_buffer_create","permalink":"/vulrule/projects/libzip/api_zip_source_buffer_create","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_zip_source_buffer","permalink":"/vulrule/projects/libzip/api_zip_source_buffer"},"next":{"title":"api_zip_source_buffer_fragment","permalink":"/vulrule/projects/libzip/api_zip_source_buffer_fragment"}}');var i=n(74848),o=n(28453);const s={},c=void 0,l={},a=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function u(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"zip_source_buffer_create"})," is an API in ",(0,i.jsx)(r.strong,{children:"libzip"}),". This rule belongs to the ",(0,i.jsx)(r.strong,{children:"api pair"})," type. This rule is generated using ",(0,i.jsx)(r.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsx)(r.p,{children:"The return value of zip_source_buffer_create must be released by calling zip_source_free, with the same object passed as the 1-th argument to zip_source_free"})}),"\n",(0,i.jsx)(r.admonition,{type:"info",children:(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Tags: ",(0,i.jsx)(r.strong,{children:"api pair"})]}),"\n",(0,i.jsxs)(r.li,{children:["Parameter Index: ",(0,i.jsx)(r.strong,{children:"-1"})]}),"\n",(0,i.jsxs)(r.li,{children:["CWE Type: ",(0,i.jsx)(r.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,i.jsx)(r.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("zip_source_buffer_create")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("zip_source_free")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("zip_source_buffer_create")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);