"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[85201],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(96540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},28746:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"projects/libxml2/api_xmlxpathfreeobject","title":"api_xmlxpathfreeobject","description":"API Overview","source":"@site/docs/projects/libxml2/api_xmlxpathfreeobject.md","sourceDirName":"projects/libxml2","slug":"/projects/libxml2/api_xmlxpathfreeobject","permalink":"/vulrule/projects/libxml2/api_xmlxpathfreeobject","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_xmlxpathfreecontext","permalink":"/vulrule/projects/libxml2/api_xmlxpathfreecontext"},"next":{"title":"libzip Rules","permalink":"/vulrule/projects/libzip/"}}');var a=t(74848),i=t(28453);const o={},l=void 0,s={},c=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"xmlXPathFreeObject"})," is an API in ",(0,a.jsx)(n.strong,{children:"libxml2"}),". This rule belongs to the ",(0,a.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,a.jsx)(n.a,{href:"../../tools/GPTAid",children:"GPTAid"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Parameter 1 must not be used later."})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Tags: ",(0,a.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,a.jsxs)(n.li,{children:["Parameter Index: ",(0,a.jsx)(n.strong,{children:"0"})]}),"\n",(0,a.jsxs)(n.li,{children:["CWE Type: ",(0,a.jsx)(n.strong,{children:"CWE-416"})]}),"\n"]})}),"\n",(0,a.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'/**\n * @name UAF\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/UAF\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("malloc") and e = fc)\n or (fc.getTarget().hasName("xmlSplitQName2") and e = fc.getArgument(1))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            // TODO-Target-change\n            fc.getTarget().hasName("xmlXPathFreeObject")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        \n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n// // TODO-addMallocFCHere\n fc.getTarget().hasName("malloc")\n or fc.getTarget().hasName("xmlSplitQName2")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("xmlXPathFreeObject")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n    override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n         isSourceFC(fc)\n         and\n         source = getSourceNode(fc)\n          )\n          or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n      }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(Expr e |\n         sink.asExpr() = e\n         or sink.asDefiningArgument() = e\n       )\n     }\n   }\n//  target is a free function\nfrom FunctionCall target, Expr use\nwhere\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and target.getAPredecessor*() = malloc)\nand not target.getAnArgument() = use\nand target.getASuccessor*() = use\n//  and \n// isLocalVariable(getMallocExpr(target))\nand  exists(Variable v| \n   v.getAnAccess() = use\n   and v.getAnAccess() = getFreeExpr(target)\n   and not exists(Expr malloc, MallocConfiguration cfg | \n       use.getAPredecessor*() = malloc \n   and malloc.getAPredecessor*() = target\n   and\n   cfg.hasFlow(DataFlow::exprNode(malloc), DataFlow::exprNode(use))\n   )\n       )\n\nselect target, "Freed in " + target.getLocation().toString() + ". Used in " + use.getLocation().toString()\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);