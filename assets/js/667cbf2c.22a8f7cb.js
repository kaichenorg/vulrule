"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[82587],{28453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>l});var n=t(96540);const a={},c=n.createContext(a);function o(e){const r=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(c.Provider,{value:r},e.children)}},91151:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"projects/ffmpeg/api_avcodec_parameters_alloc","title":"api_avcodec_parameters_alloc","description":"API Overview","source":"@site/docs/projects/ffmpeg/api_avcodec_parameters_alloc.md","sourceDirName":"projects/ffmpeg","slug":"/projects/ffmpeg/api_avcodec_parameters_alloc","permalink":"/vulrule/projects/ffmpeg/api_avcodec_parameters_alloc","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_avcodec_get_hw_frames_parameters","permalink":"/vulrule/projects/ffmpeg/api_avcodec_get_hw_frames_parameters"},"next":{"title":"api_avcodec_parameters_free","permalink":"/vulrule/projects/ffmpeg/api_avcodec_parameters_free"}}');var a=t(74848),c=t(28453);const o={},l=void 0,s={},i=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function p(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"avcodec_parameters_alloc"})," is an API in ",(0,a.jsx)(r.strong,{children:"ffmpeg"}),". This rule belongs to the ",(0,a.jsx)(r.strong,{children:"api pair"})," type. This rule is generated using ",(0,a.jsx)(r.a,{href:"../../tools/ChatDetector",children:"ChatDetector"}),"."]}),"\n",(0,a.jsx)(r.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,a.jsx)(r.admonition,{type:"tip",children:(0,a.jsx)(r.p,{children:"The return value of avcodec_parameters_alloc must be released by calling avcodec_parameters_free, with the same object passed as the 1-th argument to avcodec_parameters_free"})}),"\n",(0,a.jsx)(r.admonition,{type:"info",children:(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["Tags: ",(0,a.jsx)(r.strong,{children:"api pair"})]}),"\n",(0,a.jsxs)(r.li,{children:["Parameter Index: ",(0,a.jsx)(r.strong,{children:"-1"})]}),"\n",(0,a.jsxs)(r.li,{children:["CWE Type: ",(0,a.jsx)(r.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,a.jsx)(r.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'import cpp\nimport semmle.code.cpp.dataflow.new.DataFlow\n\n\nDataFlow::Node getSource(FunctionCall fc){\n  fc.getTarget().hasName("avcodec_parameters_alloc")\n  and result.asExpr() = fc\n}\n\nDataFlow::Node getSink(FunctionCall fc){\n  fc.getTarget().hasName("avcodec_parameters_free")\n  and result.asExpr() = fc.getArgument(0)\n}\n\nFunctionCall freeTarget(FunctionCall malloc){\n  DataFlow::localFlow(getSource(malloc), getSink(result))\n}\n\nfrom FunctionCall fc\nwhere fc.getTarget().hasName("avcodec_parameters_alloc")\n      and not exists(\n        FunctionCall free| \n        free = freeTarget(fc)\n      )\nselect fc.getLocation()\n\n'})})]})}function d(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);