"use strict";(self.webpackChunkvulrule_docusaurus=self.webpackChunkvulrule_docusaurus||[]).push([[47197],{61664:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>g});const a=JSON.parse('{"id":"libraries/openssl/evp_pkey_get_bn_param","title":"EVP_PKEY_get_bn_param","description":"openssl","source":"@site/docs/libraries/openssl/evp_pkey_get_bn_param.md","sourceDirName":"libraries/openssl","slug":"/libraries/openssl/evp_pkey_get_bn_param","permalink":"/vulrule/libraries/openssl/evp_pkey_get_bn_param","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"EVP_PKEY_get0_DH","permalink":"/vulrule/libraries/openssl/evp_pkey_get0_dh"},"next":{"title":"EVP_PKEY_get_default_digest_name","permalink":"/vulrule/libraries/openssl/evp_pkey_get_default_digest_name"}}');var t=r(74848),s=r(28453),o=r(29800);const i={sidebar_position:1},l="EVP_PKEY_get_bn_param",c={},g=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u4f7f\u7528\u89c4\u5219",id:"\u4f7f\u7528\u89c4\u5219",level:2},{value:"\u76f8\u5173API",id:"\u76f8\u5173api",level:2}];function f(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"evp_pkey_get_bn_param",children:"EVP_PKEY_get_bn_param"})}),"\n",(0,t.jsxs)("div",{className:"api-metadata",children:[(0,t.jsx)("span",{className:"api-library",children:"openssl"}),(0,t.jsx)("span",{className:"api-category",children:"Api Pair"})]}),"\n",(0,t.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,t.jsxs)(n.p,{children:["EVP_PKEY_get_bn_param \u662f openssl \u5e93\u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5API\u5c5e\u4e8e ",(0,t.jsx)(n.strong,{children:"Api Pair"})," \u7c7b\u578b\u7684\u89c4\u5219\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"\u4f7f\u7528\u89c4\u5219",children:"\u4f7f\u7528\u89c4\u5219"}),"\n",(0,t.jsxs)(n.p,{children:["\u7531 ",(0,t.jsx)(n.a,{href:"/tools/gptaid",children:"GPTAid"})," \u751f\u6210"]}),"\n",(0,t.jsx)(o.A,{ruleName:"\u89c4\u5219 1",ruleType:"Api Pair",ruleData:{Description:"Parameter 3 must be freed when no longer needed.",Label:["api pair"],"Parameter-index":["2"],"cweType-and-QLCode":[{cweType:["CWE-404"],QLCode:'/**\n * @name mallocfree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/memleak\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("EVP_PKEY_get_bn_param") and e = fc.getArgument(2))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("free")\nor fc.getTarget().hasName("BIO_free")\nor fc.getTarget().hasName("EVP_PKEY_free")\nor fc.getTarget().hasName("BN_free")\nor fc.getTarget().hasName("X509_free")\nor fc.getTarget().hasName("EVP_CIPHER_CTX_free")\nor fc.getTarget().hasName("SSL_CTX_free")\nor fc.getTarget().hasName("EVP_MD_CTX_free")\nor fc.getTarget().hasName("BN_clear_free")\nor fc.getTarget().hasName("SSL_free")\nor fc.getTarget().hasName("OPENSSL_sk_free")\nor fc.getTarget().hasName("OPENSSL_sk_pop_free")\nor fc.getTarget().hasName("EVP_PKEY_CTX_free")\nor fc.getTarget().hasName("CMS_ContentInfo_free")\nor fc.getTarget().hasName("BN_CTX_free")\nor fc.getTarget().hasName("CRYPTO_free")\nor fc.getTarget().hasName("SSL_SESSION_free")\nor fc.getTarget().hasName("ENGINE_free")\nor fc.getTarget().hasName("PKCS12_free")\nor fc.getTarget().hasName("EVP_CIPHER_free")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        // TODO-addFreeHere\n        )\n}\n\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n fc.getTarget().hasName("EVP_PKEY_get_bn_param")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("free")\nor fc.getTarget().hasName("BIO_free")\nor fc.getTarget().hasName("EVP_PKEY_free")\nor fc.getTarget().hasName("BN_free")\nor fc.getTarget().hasName("X509_free")\nor fc.getTarget().hasName("EVP_CIPHER_CTX_free")\nor fc.getTarget().hasName("SSL_CTX_free")\nor fc.getTarget().hasName("EVP_MD_CTX_free")\nor fc.getTarget().hasName("BN_clear_free")\nor fc.getTarget().hasName("SSL_free")\nor fc.getTarget().hasName("OPENSSL_sk_free")\nor fc.getTarget().hasName("OPENSSL_sk_pop_free")\nor fc.getTarget().hasName("EVP_PKEY_CTX_free")\nor fc.getTarget().hasName("CMS_ContentInfo_free")\nor fc.getTarget().hasName("BN_CTX_free")\nor fc.getTarget().hasName("CRYPTO_free")\nor fc.getTarget().hasName("SSL_SESSION_free")\nor fc.getTarget().hasName("ENGINE_free")\nor fc.getTarget().hasName("PKCS12_free")\nor fc.getTarget().hasName("EVP_CIPHER_free")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n    isSourceFC(target)\n    and result = target\n    )\n}\n   \nControlFlowNode getAfterNode(ControlFlowNode target) {\n    isSourceFC(target)\n    and\n    exists(FunctionCall fc | \n        target.getASuccessor*() = fc\n        and result = fc\n        and isSinkFC(fc)\n        and exists(MallocConfiguration cfg| \n            cfg.hasFlow(getSourceNode(target), getSinkNode(fc))\n            )\n        )\n}\n\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalAfter(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getAfterNode(target)\n    and\n    exists(BasicBlock bb | \n        bb.getAPredecessor().getANode() = node\n        and bb.getAPredecessor().getANode() = target\n        )\n}\n\n //   if every path after target exists node\nBasicBlock getLeakBBAfter(ControlFlowNode target) {\n     not exists(ControlFlowNode node | \n        node = getAfterNode(target)\n        and (not\n        exists(BasicBlock bb | \n            not bb.getANode() = node\n            and bb = target.getASuccessor*()\n            and exists(ExitBasicBlock exit | \n                bb.getASuccessor*() = exit)\n            and target.getASuccessor*() = bb\n            and not bb.getAPredecessor*() = node.getBasicBlock()\n            and not bb.getASuccessor*() = node.getBasicBlock()\n            and result = bb\n         )\n         and not isConditionalAfter(node, target)\n        )\n     )\n    \n }\n \n \n predicate isLocalVariable(Expr e) {\n    exists(FunctionCall fc| \n        fc = e \n        and\n        exists(AssignExpr ae, LocalVariable lv| \n        ae.getAChild() = fc \n        and lv.getAnAccess() = ae.getLValue()\n        )\n        or exists(LocalVariable lv| \n            lv.getInitializer().getExpr() = e\n            )\n    )\n        or\n\n     exists(LocalVariable lv | \n        \n            lv.getAnAccess() = e.getAChild*()\n            )\n }\n\n \n from FunctionCall target\n where\n target = getTargetNode()\n and \nisLocalVariable(getMallocExpr(target))\n \n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBAfter(target) )\n select target, target.getLocation().toString()'}]}}),"\n",(0,t.jsx)(n.h2,{id:"\u76f8\u5173api",children:"\u76f8\u5173API"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/openssl/bio_free",children:"BIO_free"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/openssl/ssl_ctx_free",children:"SSL_CTX_free"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/openssl/ssl_free",children:"SSL_free"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/openssl/openssl_sk_pop_free",children:"OPENSSL_sk_pop_free"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/libraries/openssl/openssl_sk_reserve",children:"OPENSSL_sk_reserve"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}}}]);