"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[48528],{526:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"projects/openssl/api_x509_store_add_cert","title":"api_x509_store_add_cert","description":"API Overview","source":"@site/docs/projects/openssl/api_x509_store_add_cert.md","sourceDirName":"projects/openssl","slug":"/projects/openssl/api_x509_store_add_cert","permalink":"/vulrule/projects/openssl/api_x509_store_add_cert","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"api_x509_req_verify_ex","permalink":"/vulrule/projects/openssl/api_x509_req_verify_ex"},"next":{"title":"api_x509_store_ctx_get1_issuer","permalink":"/vulrule/projects/openssl/api_x509_store_ctx_get1_issuer"}}');var a=t(74848),o=t(28453);const s={},c=void 0,i={},l=[{value:"API Overview",id:"api-overview",level:2},{value:"Rule Description",id:"rule-description",level:2},{value:"Rule Code",id:"rule-code",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"api-overview",children:"API Overview"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"X509_STORE_add_cert"})," is an API in ",(0,a.jsx)(n.strong,{children:"openssl"}),". This rule belongs to the ",(0,a.jsx)(n.strong,{children:"api pair"})," type. This rule is generated using ",(0,a.jsx)(n.a,{href:"../../tools/GPTAid",children:"GPTAid"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"rule-description",children:"Rule Description"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Parameter 2 must be freed when no longer needed."})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Tags: ",(0,a.jsx)(n.strong,{children:"api pair"})]}),"\n",(0,a.jsxs)(n.li,{children:["Parameter Index: ",(0,a.jsx)(n.strong,{children:"1"})]}),"\n",(0,a.jsxs)(n.li,{children:["CWE Type: ",(0,a.jsx)(n.strong,{children:"CWE-404"})]}),"\n"]})}),"\n",(0,a.jsx)(n.h2,{id:"rule-code",children:"Rule Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'/**\n * @name mallocfree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/memleak\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("X509_STORE_add_cert") and e = fc.getArgument(1))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("free")\nor fc.getTarget().hasName("BIO_free")\nor fc.getTarget().hasName("EVP_PKEY_free")\nor fc.getTarget().hasName("BN_free")\nor fc.getTarget().hasName("X509_free")\nor fc.getTarget().hasName("EVP_CIPHER_CTX_free")\nor fc.getTarget().hasName("SSL_CTX_free")\nor fc.getTarget().hasName("EVP_MD_CTX_free")\nor fc.getTarget().hasName("BN_clear_free")\nor fc.getTarget().hasName("SSL_free")\nor fc.getTarget().hasName("OPENSSL_sk_free")\nor fc.getTarget().hasName("OPENSSL_sk_pop_free")\nor fc.getTarget().hasName("EVP_PKEY_CTX_free")\nor fc.getTarget().hasName("CMS_ContentInfo_free")\nor fc.getTarget().hasName("BN_CTX_free")\nor fc.getTarget().hasName("CRYPTO_free")\nor fc.getTarget().hasName("SSL_SESSION_free")\nor fc.getTarget().hasName("ENGINE_free")\nor fc.getTarget().hasName("PKCS12_free")\nor fc.getTarget().hasName("EVP_CIPHER_free")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        // TODO-addFreeHere\n        )\n}\n\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n fc.getTarget().hasName("X509_STORE_add_cert")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("free")\nor fc.getTarget().hasName("BIO_free")\nor fc.getTarget().hasName("EVP_PKEY_free")\nor fc.getTarget().hasName("BN_free")\nor fc.getTarget().hasName("X509_free")\nor fc.getTarget().hasName("EVP_CIPHER_CTX_free")\nor fc.getTarget().hasName("SSL_CTX_free")\nor fc.getTarget().hasName("EVP_MD_CTX_free")\nor fc.getTarget().hasName("BN_clear_free")\nor fc.getTarget().hasName("SSL_free")\nor fc.getTarget().hasName("OPENSSL_sk_free")\nor fc.getTarget().hasName("OPENSSL_sk_pop_free")\nor fc.getTarget().hasName("EVP_PKEY_CTX_free")\nor fc.getTarget().hasName("CMS_ContentInfo_free")\nor fc.getTarget().hasName("BN_CTX_free")\nor fc.getTarget().hasName("CRYPTO_free")\nor fc.getTarget().hasName("SSL_SESSION_free")\nor fc.getTarget().hasName("ENGINE_free")\nor fc.getTarget().hasName("PKCS12_free")\nor fc.getTarget().hasName("EVP_CIPHER_free")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n    isSourceFC(target)\n    and result = target\n    )\n}\n   \nControlFlowNode getAfterNode(ControlFlowNode target) {\n    isSourceFC(target)\n    and\n    exists(FunctionCall fc | \n        target.getASuccessor*() = fc\n        and result = fc\n        and isSinkFC(fc)\n        and exists(MallocConfiguration cfg| \n            cfg.hasFlow(getSourceNode(target), getSinkNode(fc))\n            )\n        )\n}\n\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalAfter(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getAfterNode(target)\n    and\n    exists(BasicBlock bb | \n        bb.getAPredecessor().getANode() = node\n        and bb.getAPredecessor().getANode() = target\n        )\n}\n\n //   if every path after target exists node\nBasicBlock getLeakBBAfter(ControlFlowNode target) {\n     not exists(ControlFlowNode node | \n        node = getAfterNode(target)\n        and (not\n        exists(BasicBlock bb | \n            not bb.getANode() = node\n            and bb = target.getASuccessor*()\n            and exists(ExitBasicBlock exit | \n                bb.getASuccessor*() = exit)\n            and target.getASuccessor*() = bb\n            and not bb.getAPredecessor*() = node.getBasicBlock()\n            and not bb.getASuccessor*() = node.getBasicBlock()\n            and result = bb\n         )\n         and not isConditionalAfter(node, target)\n        )\n     )\n    \n }\n \n \n predicate isLocalVariable(Expr e) {\n    exists(FunctionCall fc| \n        fc = e \n        and\n        exists(AssignExpr ae, LocalVariable lv| \n        ae.getAChild() = fc \n        and lv.getAnAccess() = ae.getLValue()\n        )\n        or exists(LocalVariable lv| \n            lv.getInitializer().getExpr() = e\n            )\n    )\n        or\n\n     exists(LocalVariable lv | \n        \n            lv.getAnAccess() = e.getAChild*()\n            )\n }\n\n \n from FunctionCall target\n where\n target = getTargetNode()\n and \nisLocalVariable(getMallocExpr(target))\n \n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBAfter(target) )\n select target, target.getLocation().toString()\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(96540);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);