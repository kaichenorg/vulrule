"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[61083],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var a=t(96540);const r={},o=a.createContext(r);function c(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(o.Provider,{value:n},e.children)}},84042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"projects/libpcap/api_pcap_compile","title":"pcap_compile","description":"API \u6982\u8ff0","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/projects/libpcap/api_pcap_compile.md","sourceDirName":"projects/libpcap","slug":"/projects/libpcap/api_pcap_compile","permalink":"/vulrule/zh/projects/libpcap/api_pcap_compile","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pcap_close","permalink":"/vulrule/zh/projects/libpcap/api_pcap_close"},"next":{"title":"pcap_datalink","permalink":"/vulrule/zh/projects/libpcap/api_pcap_datalink"}}');var r=t(74848),o=t(28453);const c={},i="pcap_compile",s={},l=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u89c4\u5219\u63cf\u8ff0",id:"\u89c4\u5219\u63cf\u8ff0",level:2},{value:"\u89c4\u5219\u4ee3\u7801",id:"\u89c4\u5219\u4ee3\u7801",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pcap_compile",children:"pcap_compile"})}),"\n",(0,r.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"pcap_compile"})," \u662f ",(0,r.jsx)(n.strong,{children:"libpcap"})," \u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5\u89c4\u5c5e\u4e8e",(0,r.jsx)(n.strong,{children:"api pair"})," \u7c7b\u578b\u3002\u8be5\u89c4\u5219\u662f\u4f7f\u7528 ",(0,r.jsx)(n.a,{href:"../../tools/GPTAid",children:(0,r.jsx)(n.strong,{children:"GPTAid"})})," \u751f\u6210\u7684\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"\u89c4\u5219\u63cf\u8ff0",children:"\u89c4\u5219\u63cf\u8ff0"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Parameter 2 must be freed when no longer needed."})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["\u6807\u7b7e\uff1a",(0,r.jsx)(n.strong,{children:"api pair"})]}),(0,r.jsxs)(n.p,{children:["\u53c2\u6570\u4e0b\u6807\uff1a",(0,r.jsx)(n.strong,{children:"1"})]}),(0,r.jsxs)(n.p,{children:["CWE\u7c7b\u522b\uff1a",(0,r.jsx)(n.strong,{children:"CWE-404"})]})]}),"\n",(0,r.jsx)(n.h2,{id:"\u89c4\u5219\u4ee3\u7801",children:"\u89c4\u5219\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'/**\n * @name mallocfree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/memleak\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("pcap_compile") and e = fc.getArgument(1))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("free")\nor fc.getTarget().hasName("pcap_close")\nor fc.getTarget().hasName("pcap_freecode")\nor fc.getTarget().hasName("pcap_freealldevs")\nor fc.getTarget().hasName("pcap_dump_close")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        // TODO-addFreeHere\n        )\n}\n\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n fc.getTarget().hasName("pcap_compile")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("free")\nor fc.getTarget().hasName("pcap_close")\nor fc.getTarget().hasName("pcap_freecode")\nor fc.getTarget().hasName("pcap_freealldevs")\nor fc.getTarget().hasName("pcap_dump_close")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n    isSourceFC(target)\n    and result = target\n    )\n}\n   \nControlFlowNode getAfterNode(ControlFlowNode target) {\n    isSourceFC(target)\n    and\n    exists(FunctionCall fc | \n        target.getASuccessor*() = fc\n        and result = fc\n        and isSinkFC(fc)\n        and exists(MallocConfiguration cfg| \n            cfg.hasFlow(getSourceNode(target), getSinkNode(fc))\n            )\n        )\n}\n\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalAfter(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getAfterNode(target)\n    and\n    exists(BasicBlock bb | \n        bb.getAPredecessor().getANode() = node\n        and bb.getAPredecessor().getANode() = target\n        )\n}\n\n //   if every path after target exists node\nBasicBlock getLeakBBAfter(ControlFlowNode target) {\n     not exists(ControlFlowNode node | \n        node = getAfterNode(target)\n        and (not\n        exists(BasicBlock bb | \n            not bb.getANode() = node\n            and bb = target.getASuccessor*()\n            and exists(ExitBasicBlock exit | \n                bb.getASuccessor*() = exit)\n            and target.getASuccessor*() = bb\n            and not bb.getAPredecessor*() = node.getBasicBlock()\n            and not bb.getASuccessor*() = node.getBasicBlock()\n            and result = bb\n         )\n         and not isConditionalAfter(node, target)\n        )\n     )\n    \n }\n \n \n predicate isLocalVariable(Expr e) {\n    exists(FunctionCall fc| \n        fc = e \n        and\n        exists(AssignExpr ae, LocalVariable lv| \n        ae.getAChild() = fc \n        and lv.getAnAccess() = ae.getLValue()\n        )\n        or exists(LocalVariable lv| \n            lv.getInitializer().getExpr() = e\n            )\n    )\n        or\n\n     exists(LocalVariable lv | \n        \n            lv.getAnAccess() = e.getAChild*()\n            )\n }\n\n \n from FunctionCall target\n where\n target = getTargetNode()\n and \nisLocalVariable(getMallocExpr(target))\n \n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBAfter(target) )\n select target, target.getLocation().toString()\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);