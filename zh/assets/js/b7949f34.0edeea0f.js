"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[76293],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(96540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},33440:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"projects/openssl/api_dh_free","title":"DH_free","description":"API \u6982\u8ff0","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/projects/openssl/api_dh_free.md","sourceDirName":"projects/openssl","slug":"/projects/openssl/api_dh_free","permalink":"/vulrule/zh/projects/openssl/api_dh_free","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"DH_compute_key_padded","permalink":"/vulrule/zh/projects/openssl/api_dh_compute_key_padded"},"next":{"title":"DH_security_bits","permalink":"/vulrule/zh/projects/openssl/api_dh_security_bits"}}');var a=r(74848),o=r(28453);const s={},c="DH_free",l={},i=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u89c4\u5219\u63cf\u8ff0",id:"\u89c4\u5219\u63cf\u8ff0",level:2},{value:"\u89c4\u5219\u4ee3\u7801",id:"\u89c4\u5219\u4ee3\u7801",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"dh_free",children:"DH_free"})}),"\n",(0,a.jsx)(n.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"DH_free"})," \u662f ",(0,a.jsx)(n.strong,{children:"openssl"})," \u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5\u89c4\u5c5e\u4e8e",(0,a.jsx)(n.strong,{children:"api pair"})," \u7c7b\u578b\u3002\u8be5\u89c4\u5219\u662f\u4f7f\u7528 ",(0,a.jsx)(n.a,{href:"../../tools/GPTAid",children:(0,a.jsx)(n.strong,{children:"GPTAid"})})," \u751f\u6210\u7684\u3002"]}),"\n",(0,a.jsx)(n.h2,{id:"\u89c4\u5219\u63cf\u8ff0",children:"\u89c4\u5219\u63cf\u8ff0"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Parameter 1 must be allocated before."})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["\u6807\u7b7e\uff1a",(0,a.jsx)(n.strong,{children:"api pair"})]}),(0,a.jsxs)(n.p,{children:["\u53c2\u6570\u4e0b\u6807\uff1a",(0,a.jsx)(n.strong,{children:"0"})]}),(0,a.jsxs)(n.p,{children:["CWE\u7c7b\u522b\uff1a",(0,a.jsx)(n.strong,{children:"CWE-590"})]})]}),"\n",(0,a.jsx)(n.h2,{id:"\u89c4\u5219\u4ee3\u7801",children:"\u89c4\u5219\u4ee3\u7801"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'/**\n * @name freemalloc\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/freeMmalloc\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("malloc") and e = fc)\n or (fc.getTarget().hasName("OPENSSL_sk_reserve") and e = fc.getArgument(0))\n or (fc.getTarget().hasName("PKCS12_parse") and e = fc.getArgument(4))\n or (fc.getTarget().hasName("EVP_PKEY_get_bn_param") and e = fc.getArgument(2))\n or (fc.getTarget().hasName("X509_STORE_add_cert") and e = fc.getArgument(1))\n        // or\n        // (fc.getTarget().hasName("new_malloc") and e = fc.getArgument(0))\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("DH_free")\n        // or\n        //  fc.getTarget().hasName("new_free")\n        // TODO-addFreeHere\n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n//  fc.getTarget().hasName("new_malloc")\n//  or \n fc.getTarget().hasName("malloc")\n or fc.getTarget().hasName("OPENSSL_sk_reserve")\n or fc.getTarget().hasName("PKCS12_parse")\n or fc.getTarget().hasName("EVP_PKEY_get_bn_param")\n or fc.getTarget().hasName("X509_STORE_add_cert")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("DH_free")\n//  or\n//  fc.getTarget().hasName("new_free")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\n predicate isLocalVariable(Expr e) {\n     exists(LocalVariable lv | \n        exists(FunctionCall fc| \n            fc = e and\n            exists(AssignExpr ae | \n            ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n        )\n            or\n            lv.getAnAccess() = e\n            )\n }\n \n from FunctionCall target\n where\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and target.getAPredecessor*() = malloc)\n//  and \n// isLocalVariable(getMallocExpr(target))\n and not \n exists(MallocConfiguration cfg, FunctionCall malloc| \n    isSourceFC(malloc)\n    and malloc.getASuccessor*() = target\n    and\n    cfg.hasFlow(getSourceNode(malloc), getSinkNode(target))\n    )\n\n select target, target.getLocation().toString()\n \n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);