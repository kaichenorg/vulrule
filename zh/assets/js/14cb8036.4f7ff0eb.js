"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[71960],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var o=t(96540);const r={},c=o.createContext(r);function i(n){const e=o.useContext(c);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(c.Provider,{value:e},n.children)}},69978:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"projects/libdbus/api_dbus_connection_unlock","title":"_dbus_connection_unlock","description":"API \u6982\u8ff0","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/projects/libdbus/api_dbus_connection_unlock.md","sourceDirName":"projects/libdbus","slug":"/projects/libdbus/api_dbus_connection_unlock","permalink":"/vulrule/zh/projects/libdbus/api_dbus_connection_unlock","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dbus_connection_open","permalink":"/vulrule/zh/projects/libdbus/api_dbus_connection_open"},"next":{"title":"_dbus_credentials_new","permalink":"/vulrule/zh/projects/libdbus/api_dbus_credentials_new"}}');var r=t(74848),c=t(28453);const i={},s="_dbus_connection_unlock",a={},l=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u89c4\u5219\u63cf\u8ff0",id:"\u89c4\u5219\u63cf\u8ff0",level:2},{value:"\u89c4\u5219\u4ee3\u7801",id:"\u89c4\u5219\u4ee3\u7801",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"_dbus_connection_unlock",children:"_dbus_connection_unlock"})}),"\n",(0,r.jsx)(e.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"_dbus_connection_unlock"})," \u662f ",(0,r.jsx)(e.strong,{children:"libdbus"})," \u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5\u89c4\u5c5e\u4e8e",(0,r.jsx)(e.strong,{children:"api pair"})," \u7c7b\u578b\u3002\u8be5\u89c4\u5219\u662f\u4f7f\u7528 ",(0,r.jsx)(e.a,{href:"../../tools/ChatDetector",children:(0,r.jsx)(e.strong,{children:"ChatDetector"})})," \u751f\u6210\u7684\u3002"]}),"\n",(0,r.jsx)(e.h2,{id:"\u89c4\u5219\u63cf\u8ff0",children:"\u89c4\u5219\u63cf\u8ff0"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"Once a resource is passed as the 1-th argument to _dbus_connection_unlock, it must not be freed again."})}),"\n",(0,r.jsxs)(e.admonition,{type:"info",children:[(0,r.jsxs)(e.p,{children:["\u6807\u7b7e\uff1a",(0,r.jsx)(e.strong,{children:"api pair"})]}),(0,r.jsxs)(e.p,{children:["\u53c2\u6570\u4e0b\u6807\uff1a",(0,r.jsx)(e.strong,{children:"0"})]}),(0,r.jsxs)(e.p,{children:["CWE\u7c7b\u522b\uff1a",(0,r.jsx)(e.strong,{children:"CWE-415"})]})]}),"\n",(0,r.jsx)(e.h2,{id:"\u89c4\u5219\u4ee3\u7801",children:"\u89c4\u5219\u4ee3\u7801"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'/**\n * @name doublefree\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/doublefree\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \nExpr getMallocExpr(FunctionCall fc)\n{\n    exists(Expr e | \n        result = e\n        and\n        (\n            (fc.getTarget().hasName("_dbus_connection_new_for_transport") and e = fc)\n        // TODO-addMallocHere\n        )\n    )\n}\n\nExpr getFreeExpr(FunctionCall fc)\n{\n\n        result = fc.getArgument(0)\n        and\n        (\n            fc.getTarget().hasName("_dbus_connection_unlock")\n        // or\n        //  fc.getTarget().hasName("target")\n        // TODO-addFreeHere\n        )\n}\n predicate isSourceFC(FunctionCall fc)\n {\n\n fc.getTarget().hasName("_dbus_connection_new_for_transport")\n }\n\n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("_dbus_connection_unlock")\n//  or\n//  fc.getTarget().hasName("target")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getFreeExpr(fc)\n     or\n     result.asDefiningArgument() = getFreeExpr(fc)\n }\n    \n DataFlow::Node getSourceNode(FunctionCall fc)\n {\n     result.asExpr() = getMallocExpr(fc)\n     or\n     result.asDefiningArgument() = getMallocExpr(fc)\n }\n class MallocConfiguration extends DataFlow::Configuration {\n    MallocConfiguration() { this = "MallocConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(FunctionCall fc | \n        isSourceFC(fc)\n        and\n        source = getSourceNode(fc)\n         )\n         or\n          exists(AssignExpr ae| \n             ae.getAChild() = source.asExpr()\n             or ae.getAChild() = source.asDefiningArgument()\n             )\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n\n from FunctionCall target, FunctionCall free\n where\nisSinkFC(target)\nand exists(FunctionCall malloc | isSourceFC(malloc) and free.getAPredecessor*() = malloc)\nand\nisSinkFC(free)\n   and free.getASuccessor*() = target\n   and not free = target\nand exists(Variable v | \n    \n    v.getAnAccess() = getFreeExpr(target)\n    and v.getAnAccess() = getFreeExpr(free)\n//  and \n// isLocalVariable(getMallocExpr(target))\n and not \n exists(MallocConfiguration cfg, Expr malloc| \n    // isSourceFC(malloc)\n    free.getASuccessor*() = malloc\n    and malloc.getASuccessor*() = target\n    and\n    cfg.hasFlow(DataFlow::exprNode(malloc), getSinkNode(target))\n    )\n)\n select target, "First Freed in " + free.getLocation().toString() + ". Double free in " + target.getLocation().toString()\n \n'})})]})}function u(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);