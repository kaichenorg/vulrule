"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[23244],{14282:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"projects/sqlite3/api_sqlite3_db_config","title":"sqlite3_db_config","description":"API \u6982\u8ff0","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/projects/sqlite3/api_sqlite3_db_config.md","sourceDirName":"projects/sqlite3","slug":"/projects/sqlite3/api_sqlite3_db_config","permalink":"/vulrule/zh/projects/sqlite3/api_sqlite3_db_config","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sqlite3_database_file_object","permalink":"/vulrule/zh/projects/sqlite3/api_sqlite3_database_file_object"},"next":{"title":"sqlite3_db_status","permalink":"/vulrule/zh/projects/sqlite3/api_sqlite3_db_status"}}');var a=t(74848),r=t(28453);const s={},c="sqlite3_db_config",o={},l=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u89c4\u5219\u63cf\u8ff0",id:"\u89c4\u5219\u63cf\u8ff0",level:2},{value:"\u89c4\u5219\u4ee3\u7801",id:"\u89c4\u5219\u4ee3\u7801",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"sqlite3_db_config",children:"sqlite3_db_config"})}),"\n",(0,a.jsx)(e.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"sqlite3_db_config"})," \u662f ",(0,a.jsx)(e.strong,{children:"sqlite3"})," \u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5\u89c4\u5c5e\u4e8e",(0,a.jsx)(e.strong,{children:"parameter check"})," \u7c7b\u578b\u3002\u8be5\u89c4\u5219\u662f\u4f7f\u7528 ",(0,a.jsx)(e.a,{href:"../../tools/GPTAid",children:(0,a.jsx)(e.strong,{children:"GPTAid"})})," \u751f\u6210\u7684\u3002"]}),"\n",(0,a.jsx)(e.h2,{id:"\u89c4\u5219\u63cf\u8ff0",children:"\u89c4\u5219\u63cf\u8ff0"}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"Parameter 1 must not be NULL."})}),"\n",(0,a.jsxs)(e.admonition,{type:"info",children:[(0,a.jsxs)(e.p,{children:["\u6807\u7b7e\uff1a",(0,a.jsx)(e.strong,{children:"parameter check"})]}),(0,a.jsxs)(e.p,{children:["\u53c2\u6570\u4e0b\u6807\uff1a",(0,a.jsx)(e.strong,{children:"0"})]}),(0,a.jsxs)(e.p,{children:["CWE\u7c7b\u522b\uff1a",(0,a.jsx)(e.strong,{children:"CWE-476"})]})]}),"\n",(0,a.jsx)(e.h2,{id:"\u89c4\u5219\u4ee3\u7801",children:"\u89c4\u5219\u4ee3\u7801"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'/**\n * @name parameterCheck\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/paracheck\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n \n     \n Expr getSinkExpr(FunctionCall fc)\n {\n     //Change\n result = fc.getArgument(0)\n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n     // Change\n fc.getTarget().hasName("sqlite3_db_config")\n }\n GuardCondition getGuard(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n     exists(Expr e, Variable a| e = getSinkExpr(fc)\n    //  and isLocalVariable(a)\n     and a.getAnAccess() = e\n     and exists(GuardCondition g, Expr ge| \n         a.getAnAccess() = ge\n         and g.getASuccessor*() = fc\n         and g.getAChild*() = ge\n         and not exists(FunctionCall fc_in | \n            g.getAChild*() = fc_in\n            and fc_in.getAnArgument() = a.getAnAccess()\n            )\n         and result = g\n         )\n     )\n }\n \n// predicate getMalloc(FunctionCall fc) {\n//   fc.getTarget().hasName("malloc")\n  \n// }\n\n class PathConfiguration extends DataFlow::Configuration {\n    PathConfiguration() { this = "PathConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n       exists(AssignExpr a | \n        source.asExpr() = a.getRValue()\n        and exists(Variable v | \n          v.getAnAccess() = a.getRValue()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n         )\n         or exists(Variable v | \n          source.asExpr() = v.getInitializer().getExpr()\n          and not v instanceof ExcludeArrayAndConstantPointer\n          )\n          or\n          exists(FunctionCall fc |\n            source.asExpr() = fc)\n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n        isSinkFC(fc)\n        and\n        sink.asExpr() = getSinkExpr(fc)\n    )\n     }\n   }\n\n\npredicate hasFlowtoAPI(FunctionCall fc) {\n    isSinkFC(fc)\n    and\n    exists(PathConfiguration p, DataFlow::Node source| \n        p.hasFlow(source, DataFlow::exprNode(getSinkExpr(fc)))\n    \n        )\n}\n//  predicate \n\n\npredicate hasSpecifiedFunctionInThen(FunctionCall fc) {\n    // isSinkFC(fc) \n    // and isuseSamePara(fc, barrier)\n    // and\n    exists(IfStmt ifStmt | \n      fc.getEnclosingStmt() = ifStmt.getThen().getAChild*()\n      and not exists(Stmt elseStmt | elseStmt = ifStmt.getElse())\n        )\n  }\n\n  class ExcludeArrayAndConstantPointer extends Variable {\n    ExcludeArrayAndConstantPointer() {\n      exists(Type t |\n        // Exclude array types\n        t = this.getType() and\n        t instanceof ArrayType or\n  \n        // Exclude constant pointer types\n        t = this.getType() and\n        t instanceof PointerType and\n        exists(Expr initializer |\n            this.getInitializer().getExpr() = initializer and\n            initializer instanceof StringLiteral)\n      )\n    }\n  }\n\n  predicate isuseSamePara(FunctionCall target, FunctionCall barrier) {\n    isSinkFC(target)\n    and\n    exists(Variable v, Expr p| \n        p = getSinkExpr(target)\n        and\n        barrier.getAnArgument() = v.getAnAccess()\n        and v.getAnAccess() = p\n        and barrier.getASuccessor+() = target\n        )\n}\n\n from FunctionCall target\n where\n (isSinkFC(target)\n and hasFlowtoAPI(target)\n and not exists(GuardCondition g| \n     g = getGuard(target)\n    //  and source.getASuccessor*() = g\n     )\nand exists(Expr e, LocalVariable a| e = getSinkExpr(target)\n//  and isLocalVariable(a)\n and a.getAnAccess() = e.getAChild*()\n)\nand not exists(AddressOfExpr ae | \n    ae = getSinkExpr(target)))\n\n    and \n    (\n\n        (not exists(FunctionCall barrier | isuseSamePara(target, barrier)))\n    or (\n        exists(FunctionCall barrier | \n        isuseSamePara(target, barrier)\n        and hasSpecifiedFunctionInThen(barrier)\n        )\n        )\n\n    )\n\n    and exists(Variable v | \n        v.getAnAccess() = getSinkExpr(target)\n        and not v instanceof ExcludeArrayAndConstantPointer\n        )\n select target, target.getLocation().toString()\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var i=t(96540);const a={},r=i.createContext(a);function s(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);