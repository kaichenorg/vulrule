"use strict";(self.webpackChunkvulrule=self.webpackChunkvulrule||[]).push([[31605],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>c});var o=t(96540);const r={},a=o.createContext(r);function i(n){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(a.Provider,{value:e},n.children)}},38940:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"projects/libpcap/api_pcap_loop","title":"pcap_loop","description":"API \u6982\u8ff0","source":"@site/i18n/zh/docusaurus-plugin-content-docs/current/projects/libpcap/api_pcap_loop.md","sourceDirName":"projects/libpcap","slug":"/projects/libpcap/api_pcap_loop","permalink":"/vulrule/zh/projects/libpcap/api_pcap_loop","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pcap_list_tstamp_types","permalink":"/vulrule/zh/projects/libpcap/api_pcap_list_tstamp_types"},"next":{"title":"pcap_major_version","permalink":"/vulrule/zh/projects/libpcap/api_pcap_major_version"}}');var r=t(74848),a=t(28453);const i={},c="pcap_loop",s={},l=[{value:"API \u6982\u8ff0",id:"api-\u6982\u8ff0",level:2},{value:"\u89c4\u5219\u63cf\u8ff0",id:"\u89c4\u5219\u63cf\u8ff0",level:2},{value:"\u89c4\u5219\u4ee3\u7801",id:"\u89c4\u5219\u4ee3\u7801",level:2}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"pcap_loop",children:"pcap_loop"})}),"\n",(0,r.jsx)(e.h2,{id:"api-\u6982\u8ff0",children:"API \u6982\u8ff0"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"pcap_loop"})," \u662f ",(0,r.jsx)(e.strong,{children:"libpcap"})," \u4e2d\u7684\u4e00\u4e2aAPI\u3002\u8be5\u89c4\u5c5e\u4e8e",(0,r.jsx)(e.strong,{children:"initialization"})," \u7c7b\u578b\u3002\u8be5\u89c4\u5219\u662f\u4f7f\u7528 ",(0,r.jsx)(e.a,{href:"../../tools/GPTAid",children:(0,r.jsx)(e.strong,{children:"GPTAid"})})," \u751f\u6210\u7684\u3002"]}),"\n",(0,r.jsx)(e.h2,{id:"\u89c4\u5219\u63cf\u8ff0",children:"\u89c4\u5219\u63cf\u8ff0"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"Parameter 3 must be initialized."})}),"\n",(0,r.jsxs)(e.admonition,{type:"info",children:[(0,r.jsxs)(e.p,{children:["\u6807\u7b7e\uff1a",(0,r.jsx)(e.strong,{children:"initialization"})]}),(0,r.jsxs)(e.p,{children:["\u53c2\u6570\u4e0b\u6807\uff1a",(0,r.jsx)(e.strong,{children:"2"})]}),(0,r.jsxs)(e.p,{children:["CWE\u7c7b\u522b\uff1a",(0,r.jsx)(e.strong,{children:"CWE-457"})]})]}),"\n",(0,r.jsx)(e.h2,{id:"\u89c4\u5219\u4ee3\u7801",children:"\u89c4\u5219\u4ee3\u7801"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'/**\n * @name uninitialize\n * @description description\n * @kind problem\n * @problem.severity error\n * @precision high\n * @id cpp/uninitialize\n * @tags security\n */\n\n import cpp\n import semmle.code.cpp.dataflow.TaintTracking\n import semmle.code.cpp.dataflow.DataFlow\n import semmle.code.cpp.security.Security\n import semmle.code.cpp.controlflow.Guards\n import semmle.code.cpp.valuenumbering.GlobalValueNumbering\n\n predicate isSourceFC(FunctionCall fc)\n {\n fc.getTarget().hasName("initialize")\n or fc.getTarget().hasName("pcap_compile")\n or fc.getTarget().hasName("pcap_findalldevs")\n }\n\n//  DataFlow::Node getSourceNode(FunctionCall fc)\n//  {\n//      result.asExpr() = getMallocExpr(fc)\n//      or\n//      result.asDefiningArgument() = getMallocExpr(fc)\n//  }\n\n Expr getSinkExpr(FunctionCall fc)\n {\n    isSinkFC(fc)\n    and\n result = fc.getArgument(2) \n }\n \n predicate isSinkFC(FunctionCall fc)\n {\n fc.getTarget().hasName("pcap_loop")\n }\n DataFlow::Node getSinkNode(FunctionCall fc)\n {\n     result.asExpr() = getSinkExpr(fc)\n     or\n     result.asDefiningArgument() = getSinkExpr(fc)\n }\n    \n class ParameterConfiguration extends DataFlow::Configuration {\n     ParameterConfiguration() { this = "ParameterConfiguration" }\n   \n     override predicate isSource(DataFlow::Node source) {\n        exists(FunctionCall fc | \n            isSourceFC(fc)\n            and\n            (source.asExpr() = fc\n            or\n            source.asExpr() = fc.getAnArgument()\n            or\n            source.asDefiningArgument() = fc.getAnArgument())\n            )\n        \n     }\n     override predicate isSink(DataFlow::Node sink) {\n       // sink.asExpr()\n       exists(FunctionCall fc |\n         isSinkFC(fc)\n         and sink = getSinkNode(fc)\n       )\n     }\n   }\n   predicate isFlow(Expr source, Expr sink) {\n    exists(ParameterConfiguration cfg | \n            cfg.hasFlow(DataFlow::exprNode(source), DataFlow::exprNode(sink))\n        )\n    \n}\n\n// predicate isFlow(Expr source, Expr sink) {\n//     exists(FunctionCall sourcefc, FunctionCall sinkfc| \n//         isSourceFC(sourcefc)\n//         and isSinkFC(sinkfc)\n//         and (source = sourcefc.getAnArgument() or source = sourcefc)\n//         and sink = getSinkExpr(sinkfc)\n//         and exists(ParameterConfiguration cfg | \n//             cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(sinkfc))\n//             )\n//         )\n    \n// }\n   \nControlFlowNode getTargetNode() {\n    exists(FunctionCall target | \n        isSinkFC(target)\n    // target.getTarget().hasName("free")\n    and result = target\n    )\n}\n\nControlFlowNode getBeforeNode(FunctionCall target) {\n    exists(FunctionCall sourcefc, ParameterConfiguration cfg, Expr source| \n        isSourceFC(sourcefc)\n        and (source = sourcefc or source = sourcefc.getAnArgument())\n        and\n        cfg.hasFlow(DataFlow::exprNode(source), getSinkNode(target))\n        and target.getAPredecessor*() = source\n        // and not e = target.getAnArgument()\n        and result = sourcefc)\n}\n\n// return True\u8bf4\u660e\u8be5node\u662f conditional\u7684\uff0c\u4f1aleak\npredicate isConditionalBefore(ControlFlowNode node, ControlFlowNode target) {\n    target = getTargetNode()\n    and\n    node = getBeforeNode(target)\n    and not node.getBasicBlock() = target.getBasicBlock()\n    and\n    exists(BasicBlock bb | \n        bb.getASuccessor().getANode() = node\n        and bb.getASuccessor().getANode() = target\n        \n        )\n}\n\n\nBasicBlock getLeakBBBefore(ControlFlowNode target) {\n    isSinkFC(target)\n    and\n    // result.getASuccessor*() = target\n    // and\n    not exists(ControlFlowNode node | \n        node = getBeforeNode(target)\n        and (not\n        exists(BasicBlock bb | \n            bb.getASuccessor*() = target\n            // and bb.getAPredecessor*() = node\n            and not bb.getANode() = node\n        and result = bb\n        and not bb.getAPredecessor*() = node.getBasicBlock()\n        and not bb.getASuccessor*() = node.getBasicBlock()\n        )\n        and not isConditionalBefore(node, target)\n        )\n        )\n}\n\n \n predicate isLocalVariable(Expr e) {\n    exists(LocalVariable lv | \n       exists(FunctionCall fc| \n           fc = e and\n           exists(AssignExpr ae | \n           ae.getAChild() = fc and lv.getAnAccess() = ae.getLValue())\n       )\n           or\n           lv.getAnAccess() = e\n           )\n}\n \n\n \n \n from FunctionCall target\n where\n target = getTargetNode()\n and\n isLocalVariable(getSinkExpr(target))\n//  and after.getTarget().hasName("free")\n // and not exists(Expr check| check=getCheckExpr(target))\n and exists(BasicBlock bb | bb = getLeakBBBefore(target))\n select target, target.getLocation().toString()\n \n'})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}}}]);